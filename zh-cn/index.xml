<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yehh</title>
    <link>https://blog.yehaohui.com/zh-cn/</link>
    <description>Recent content on Yehh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 23 Oct 2023 08:01:23 +0800</lastBuildDate>
    
    <atom:link href="https://blog.yehaohui.com/zh-cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://blog.yehaohui.com/zh-cn/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/about/</guid>
      <description>Hi! 我是叶浩辉 华南理工大学 软件学院三年级本科生, 兴趣集中在Computer Vision 和 Trustworthy Machine Learning。 Key/Value Engine(RocksDB), distributed system, cloud native, golang, linux, k8s, docker, etc. 希望不断学习，不断进</description>
      <content:encoded><![CDATA[<h2 id="hi-我是叶浩辉httpsblogyehaohuicom">Hi! 我是<a href="https://blog.yehaohui.com/">叶浩辉</a></h2>
<p><a href="https://www.scut.edu.cn/new/">华南理工大学</a> 软件学院三年级本科生, <del>兴趣集中在Computer Vision 和 Trustworthy Machine Learning。</del> Key/Value Engine(RocksDB), distributed system, cloud native, golang, linux, k8s, docker, etc.</p>
<p>希望不断学习，不断进步，通过深度阅读提升思考能力。</p>
<h2 id="阅读">阅读</h2>
<p>最近阅读：</p>
<p><a href="https://github.com/Vonng/ddia">DDIA 设计数据密集型应用</a></p>
<p><a href="https://sfc33ed4d8ae30993.jimcontent.com/download/version/0/module/5761298011/name/%E6%9B%BC%E6%98%86%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%28%E4%B8%AD%E6%96%87%29%E7%AC%AC%E4%BA%94%E7%89%88%28%E5%AE%8F%E8%A7%82%E5%88%86%E5%86%8C%29.pdf">principles of economics mankiw 宏观经济学 曼昆</a></p>
<h2 id="关于本站">关于本站</h2>
<blockquote>
<p>本站灵感来自<a href="https://www.pseudoyu.com/zh/">pseudoyou</a>,真诚、自省的文字和开源的精神是我建站的目标。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>osproxy-core</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/10/23/category/osproxy-core/</link>
      <pubDate>Mon, 23 Oct 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/10/23/category/osproxy-core/</guid>
      <description>这篇文章介绍OSproxy的核心功能 首先要清楚的一点就是，osproxy的工作流程是： 上传：根据uid临时存在本地然后调用存储服务接口存储 下</description>
      <content:encoded><![CDATA[<h2 id="这篇文章介绍osproxy的核心功能">这篇文章介绍OSproxy的核心功能</h2>
<p>首先要清楚的一点就是，osproxy的工作流程是：</p>
<ol>
<li>上传：根据uid临时存在本地然后调用存储服务接口存储</li>
<li>下载：基本上就是调用存储服务接口直接下载。</li>
</ol>
<h3 id="目录结构">目录结构</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">app
</span></span><span class="line"><span class="cl">├── app.go
</span></span><span class="line"><span class="cl">├── middleware
</span></span><span class="line"><span class="cl">│   ├── cors.go
</span></span><span class="line"><span class="cl">│   ├── panic.go
</span></span><span class="line"><span class="cl">│   ├── README.md
</span></span><span class="line"><span class="cl">│   ├── requestlogger.go
</span></span><span class="line"><span class="cl">│   └── tracelogger.go
</span></span><span class="line"><span class="cl">├── models
</span></span><span class="line"><span class="cl">│   ├── metadatainfo.go
</span></span><span class="line"><span class="cl">│   ├── multipartinfo.go
</span></span><span class="line"><span class="cl">│   ├── README.md
</span></span><span class="line"><span class="cl">│   ├── taskinfo.go
</span></span><span class="line"><span class="cl">│   └── uid.go
</span></span><span class="line"><span class="cl">├── pkg
</span></span><span class="line"><span class="cl">│   ├── base
</span></span><span class="line"><span class="cl">│   ├── event
</span></span><span class="line"><span class="cl">│   ├── README.md
</span></span><span class="line"><span class="cl">│   ├── repo
</span></span><span class="line"><span class="cl">│   ├── storage
</span></span><span class="line"><span class="cl">│   ├── thirdparty
</span></span><span class="line"><span class="cl">│   ├── utils
</span></span><span class="line"><span class="cl">│   └── web
</span></span><span class="line"><span class="cl">└── README.md
</span></span></code></pre></div><p>app用来放中间件、模型及业务逻辑的代码。
pkg用来表示封装好的公共代码，models用来表示数据库模型，middleware用来表示中间件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">api
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── router.go
</span></span><span class="line"><span class="cl">└── v0
</span></span><span class="line"><span class="cl">    ├── checkpoint.go
</span></span><span class="line"><span class="cl">    ├── download.go
</span></span><span class="line"><span class="cl">    ├── healthcheck.go
</span></span><span class="line"><span class="cl">    ├── link.go
</span></span><span class="line"><span class="cl">    ├── proxy.go
</span></span><span class="line"><span class="cl">    ├── resume.go
</span></span><span class="line"><span class="cl">    └── upload.go
</span></span></code></pre></div><p>api的handler和路由管理</p>
<h3 id="首先看app目录">首先看app目录</h3>
<h4 id="storage">storage</h4>
<p>既然是存储代理，那么这里的存储肯定是一个接口，对应有着不同的实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// customstorage.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">CustomStorage</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// MakeBucket 创建存储桶
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">MakeBucket</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// GetObject 获取存储对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">GetObject</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">int64</span><span class="p">,</span> <span class="kt">int64</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// PutObject 上传存储对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">PutObject</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// DeleteObject 删除存储对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">DeleteObject</span><span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//这里倒和配置的部分大同小异，只是加了一个读写锁。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">LangGoStorage</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Mux</span>     <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Storage</span> <span class="nx">CustomStorage</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lgStorage</span> <span class="o">*</span><span class="nx">LangGoStorage</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//被cmd/main.go调用一次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">InitStorage</span><span class="p">(</span><span class="nx">conf</span> <span class="o">*</span><span class="nx">config</span><span class="p">.</span><span class="nx">Configuration</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//根据conf初始化CustomStorage
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//针对不同的存储类型，初始化Bucket
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">bucket</span> <span class="o">:=</span> <span class="k">range</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;image&#34;</span><span class="p">,</span> <span class="s">&#34;video&#34;</span><span class="p">,</span> <span class="s">&#34;audio&#34;</span><span class="p">,</span> <span class="s">&#34;archive&#34;</span><span class="p">,</span> <span class="s">&#34;unknown&#34;</span><span class="p">,</span> <span class="s">&#34;doc&#34;</span><span class="p">}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">storageHandler</span><span class="p">.</span><span class="nf">MakeBucket</span><span class="p">(</span><span class="nx">bucket</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>目前实现了Local，Minio(Amazon oss)，Cos(腾讯对象存储)，Oss()</p>
<p>我们简单看两个</p>
<h5 id="local">Local</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">LocalStorage</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">RootPath</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewLocalStorage</span><span class="p">()</span> <span class="o">*</span><span class="nx">LocalStorage</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">LocalStorage</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">RootPath</span><span class="p">:</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">LocalStore</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">LocalStorage</span><span class="p">)</span> <span class="nf">MakeBucket</span><span class="p">(</span><span class="nx">bucketName</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//就是根据bucketname创建一个文件夹
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">LocalStorage</span><span class="p">)</span> <span class="nf">GetObject</span><span class="p">(</span><span class="nx">bucketName</span><span class="p">,</span> <span class="nx">objectName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">length</span> <span class="kt">int64</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//根据所给的bucketname和objectname打开一个文件，然后读取offset到offset+length的内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">LocalStorage</span><span class="p">)</span> <span class="nf">PutObject</span><span class="p">(</span><span class="nx">bucketName</span><span class="p">,</span> <span class="nx">objectName</span><span class="p">,</span> <span class="nx">filePath</span><span class="p">,</span> <span class="nx">contentType</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//也差不多
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">LocalStorage</span><span class="p">)</span> <span class="nf">DeleteObject</span><span class="p">(</span><span class="nx">bucketName</span><span class="p">,</span> <span class="nx">objectName</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//就是简单把文件删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h5 id="minio">minio</h5>
<p>minio是一个非常流行的分布式对象存储文件系统</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MinIOStorage</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">*</span><span class="nx">minio</span><span class="p">.</span><span class="nx">Client</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NewMinIOStorage .
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewMinIOStorage</span><span class="p">()</span> <span class="o">*</span><span class="nx">MinIOStorage</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">LangGoMinio</span><span class="p">).</span><span class="nf">NewMinio</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">MinIOStorage</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span> <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">//存储接口的实现就是调用client，其实差不多
</span></span></span><span class="line"><span class="cl"><span class="c1">//具体可以参考 https://min.io/docs/minio/linux/developers/go/API.html
</span></span></span></code></pre></div><h4 id="heading"></h4>
<h3 id="api目录">api目录</h3>
<p>在cmd/main.go中调用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="nx">engine</span> <span class="o">:=</span> <span class="nx">api</span><span class="p">.</span><span class="nf">NewRouter</span><span class="p">(</span><span class="nx">lgConfig</span><span class="p">,</span> <span class="nx">lgLogger</span><span class="p">)</span>
</span></span></code></pre></div><p>由于这里的api和gin的engine有关，还是有学习的必要的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewRouter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">conf</span> <span class="o">*</span><span class="nx">config</span><span class="p">.</span><span class="nx">Configuration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lgLogger</span> <span class="o">*</span><span class="nx">bootstrap</span><span class="p">.</span><span class="nx">LangGoLogger</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="o">*</span><span class="nx">gin</span><span class="p">.</span><span class="nx">Engine</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//设置mode为release
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Env</span> <span class="o">==</span> <span class="s">&#34;prod&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gin</span><span class="p">.</span><span class="nf">SetMode</span><span class="p">(</span><span class="nx">gin</span><span class="p">.</span><span class="nx">ReleaseMode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">router</span> <span class="o">:=</span> <span class="nx">gin</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// middleware
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">corsM</span> <span class="o">:=</span> <span class="nx">middleware</span><span class="p">.</span><span class="nf">NewCors</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">traceL</span> <span class="o">:=</span> <span class="nx">middleware</span><span class="p">.</span><span class="nf">NewTrace</span><span class="p">(</span><span class="nx">lgLogger</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">requestL</span> <span class="o">:=</span> <span class="nx">middleware</span><span class="p">.</span><span class="nf">NewRequestLog</span><span class="p">(</span><span class="nx">lgLogger</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">panicRecover</span> <span class="o">:=</span> <span class="nx">middleware</span><span class="p">.</span><span class="nf">NewPanicRecover</span><span class="p">(</span><span class="nx">lgLogger</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 跨域 trace-id 日志
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">router</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">corsM</span><span class="p">.</span><span class="nf">Handler</span><span class="p">(),</span> <span class="nx">traceL</span><span class="p">.</span><span class="nf">Handler</span><span class="p">(),</span> <span class="nx">requestL</span><span class="p">.</span><span class="nf">Handler</span><span class="p">(),</span> <span class="nx">panicRecover</span><span class="p">.</span><span class="nf">Handler</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 静态资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">router</span><span class="p">.</span><span class="nf">StaticFile</span><span class="p">(</span><span class="s">&#34;/assets&#34;</span><span class="p">,</span> <span class="s">&#34;../../static/image/back.png&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// swag docs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">docs</span><span class="p">.</span><span class="nx">SwaggerInfo</span><span class="p">.</span><span class="nx">BasePath</span> <span class="p">=</span> <span class="s">&#34;/&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">router</span><span class="p">.</span><span class="nf">GET</span><span class="p">(</span><span class="s">&#34;/swagger/*any&#34;</span><span class="p">,</span> <span class="nx">gs</span><span class="p">.</span><span class="nf">WrapHandler</span><span class="p">(</span><span class="nx">swaggerFiles</span><span class="p">.</span><span class="nx">Handler</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 动态资源 注册 api 分组路由
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">setApiGroupRoutes</span><span class="p">(</span><span class="nx">router</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">router</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>rocksdb原理</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/10/17/category/rocksdb-principal/</link>
      <pubDate>Tue, 17 Oct 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/10/17/category/rocksdb-principal/</guid>
      <description>基本概念 版本(Version)：这个是RocksDB内部概念。一个版本包含某个时间点的所有存活SST文件。一旦一个落盘或者压缩完成，由于存活</description>
      <content:encoded><![CDATA[<h4 id="基本概念">基本概念</h4>
<ul>
<li>
<p>版本(Version)：这个是RocksDB内部概念。一个版本包含某个时间点的所有存活SST文件。一旦一个落盘或者压缩完成，由于存活SST文件发生了变化，一个新的“版本”会被创建。一个旧的“版本”还会被仍在进行的读请求或者压缩工作使用。旧的版本最终会被回收。</p>
</li>
<li>
<p>超级版本(super version)：RocksDB的内部概念。一个超级版本包含一个特定时间的 的 一个SST文件列表（一个“版本”）以及一个存活memtable的列表。不管是压缩还是落盘，抑或是一个memtable切换，都会生成一个新的“超级版本”。一个旧的“超级版本”会被继续用于正在进行的读请求。旧的超级版本最终会在不再需要的时候被回收掉。</p>
</li>
<li>
<p>对two_write_queues的解释 When we have two write queues (two_write_queues=true) then the primary write queue can write to both WAL and memtable and the 2nd one can write only to the WAL, which will be used for writing the commit marker in WritePrepared transactions. In this case the primary queue (and its PreReleaseCallback callback) is always used for prepare entires and the 2nd queue (and its PreReleaseCallback callback) is always used only for commits. This i) avoids race condition between the two queues, ii) maintains the in-order addition to PreparedHeap, and iii) simplifies the code by avoiding concurrent insertion to CommitCache (and the code that is called upon each eviction from it).</p>
</li>
</ul>
<h4 id="transaction">transaction</h4>
<p>暂时没有总结什么，看<a href="https://whoiami.github.io/ROCKSDB_TRANSACTION_2PC">2PC</a>和<a href="https://whoiami.github.io/ROCKSDB_TRANSACTION">transaction</a>就差不多了。</p>
<h4 id="pipeline">pipeline</h4>
<p>pipeline write</p>
<p>【默认情况】</p>
<p>单一的write thread队列，队首writer成为leader，并负责写WAL以及memtable</p>
<p>【pipeline write】</p>
<p>只有一个writer的情况下，要先写WAL，再写memtbale</p>
<p>如果有多个writer，默认情况就需要先写完WAL，在写memtable</p>
<p>启用pipeline之后，前一个writer写完WAL就可以写memtbale，而后一个writer开始写他的WAL</p>
<p>开启方式：Options.enable_pipeline_write=true</p>
<p>提升：20%性能提升</p>
<h4 id="merge">Merge</h4>
<p>Merge 本质上就是一个 read-modify-write的原子操作。</p>
<p>code is all you need</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">    <span class="c1">// A &#39;model&#39; merge operator with uint64 addition semantics
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">class</span> <span class="nc">UInt64AddOperator</span> <span class="o">:</span> <span class="k">public</span> <span class="n">AssociativeMergeOperator</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">Merge</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="k">const</span> <span class="n">Slice</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="k">const</span> <span class="n">Slice</span><span class="o">*</span> <span class="n">existing_value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="k">const</span> <span class="n">Slice</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*</span> <span class="n">new_value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">Logger</span><span class="o">*</span> <span class="n">logger</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// assuming 0 if no existing value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">uint64_t</span> <span class="n">existing</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">existing_value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">Deserialize</span><span class="p">(</span><span class="o">*</span><span class="n">existing_value</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">existing</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// if existing_value is corrupted, treat it as 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Log</span><span class="p">(</span><span class="n">logger</span><span class="p">,</span> <span class="s">&#34;existing value corruption&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">existing</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">uint64_t</span> <span class="n">oper</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">Deserialize</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">oper</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="c1">// if operand is corrupted, treat it as 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">Log</span><span class="p">(</span><span class="n">logger</span><span class="p">,</span> <span class="s">&#34;operand value corruption&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="n">oper</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="k">new</span> <span class="o">=</span> <span class="n">existing</span> <span class="o">+</span> <span class="n">oper</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">*</span><span class="n">new_value</span> <span class="o">=</span> <span class="n">Serialize</span><span class="p">(</span><span class="k">new</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>        <span class="c1">// always return true for this, since we treat all errors as &#34;zero&#34;.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">virtual</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="nf">Name</span><span class="p">()</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;UInt64AddOperator&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Implement &#39;add&#39; directly with the new Merge operation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">class</span> <span class="nc">MergeBasedCounters</span> <span class="o">:</span> <span class="k">public</span> <span class="n">RocksCounters</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">MergeBasedCounters</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">DB</span><span class="o">&gt;</span> <span class="n">db</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// mapped to a leveldb Merge operation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">Add</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">value</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="n">serialized</span> <span class="o">=</span> <span class="n">Serialize</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">db_</span><span class="o">-&gt;</span><span class="n">Merge</span><span class="p">(</span><span class="n">merge_option_</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">serialized</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// How to use it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">DB</span><span class="o">*</span> <span class="n">dbp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Options</span> <span class="n">options</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">options</span><span class="p">.</span><span class="n">merge_operator</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">UInt64AddOperator</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">DB</span><span class="o">::</span><span class="n">Open</span><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="s">&#34;/tmp/db&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dbp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">DB</span><span class="o">&gt;</span> <span class="n">db</span><span class="p">(</span><span class="n">dbp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">MergeBasedCounters</span> <span class="nf">counters</span><span class="p">(</span><span class="n">db</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">counters</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="kt">uint64_t</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">counters</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">);</span>
</span></span></code></pre></div><p>AssociativeMergeOperator适用于比较简单的情景，也就是说，如果你的merge操作是满足结合律的，那么就可以使用AssociativeMergeOperator。</p>
<p>但是如果是复杂一点的，比如说data是json字符串，但是merge的时候只是对其中的一个子结构进行修改，那么就需要使用MergeOperator。</p>
<p>值得注意的是，put和merge并不会在invoke的时候就立刻执行，而是会stack，在get的时候才执行，而在stack的时候就是PartialMerge的时候了。</p>
<p>接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">    <span class="c1">// The Merge Operator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Essentially, a MergeOperator specifies the SEMANTICS of a merge, which only
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// client knows. It could be numeric addition, list append, string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// concatenation, edit data structure, ... , anything.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// The library, on the other hand, is concerned with the exercise of this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// interface, at the right time (during get, iteration, compaction...)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">class</span> <span class="nc">MergeOperator</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">virtual</span> <span class="o">~</span><span class="n">MergeOperator</span><span class="p">()</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// Gives the client a way to express the read -&gt; modify -&gt; write semantics
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// key:         (IN) The key that&#39;s associated with this merge operation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// existing:    (IN) null indicates that the key does not exist before this op
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// operand_list:(IN) the sequence of merge operations to apply, front() first.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// new_value:  (OUT) Client is responsible for filling the merge result here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// logger:      (IN) Client could use this to log errors during merge.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// Return true on success. Return false failure / error / corruption.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">virtual</span> <span class="kt">bool</span> <span class="nf">FullMerge</span><span class="p">(</span><span class="k">const</span> <span class="n">Slice</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="k">const</span> <span class="n">Slice</span><span class="o">*</span> <span class="n">existing_value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">operand_list</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*</span> <span class="n">new_value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="n">Logger</span><span class="o">*</span> <span class="n">logger</span><span class="p">)</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">struct</span> <span class="nc">MergeOperationInput</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">      <span class="k">struct</span> <span class="nc">MergeOperationOutput</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">      <span class="k">virtual</span> <span class="kt">bool</span> <span class="nf">FullMergeV2</span><span class="p">(</span><span class="k">const</span> <span class="n">MergeOperationInput</span><span class="o">&amp;</span> <span class="n">merge_in</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                               <span class="n">MergeOperationOutput</span><span class="o">*</span> <span class="n">merge_out</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// This function performs merge(left_op, right_op)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// when both the operands are themselves merge operation types.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// Save the result in *new_value and return true. If it is impossible
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// or infeasible to combine the two operations, return false instead.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">virtual</span> <span class="kt">bool</span> <span class="nf">PartialMerge</span><span class="p">(</span><span class="k">const</span> <span class="n">Slice</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="k">const</span> <span class="n">Slice</span><span class="o">&amp;</span> <span class="n">left_operand</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="k">const</span> <span class="n">Slice</span><span class="o">&amp;</span> <span class="n">right_operand</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*</span> <span class="n">new_value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">Logger</span><span class="o">*</span> <span class="n">logger</span><span class="p">)</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// The name of the MergeOperator. Used to check for MergeOperator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// mismatches (i.e., a DB created with one MergeOperator is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// accessed using a different MergeOperator)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">virtual</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="nf">Name</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// Determines whether the MergeOperator can be called with just a single
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// merge operand.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// Override and return true for allowing a single operand. FullMergeV2 and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// PartialMerge/PartialMergeMulti should be implemented accordingly to handle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// a single operand.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">virtual</span> <span class="kt">bool</span> <span class="nf">AllowSingleOperand</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span></code></pre></div><p>示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// A &#39;model&#39; pseudo-code merge operator with json update semantics
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// We pretend we have some in-memory data-structure (called JsonDataStructure) for
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// parsing and serializing json strings.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">class</span> <span class="nc">JsonMergeOperator</span> <span class="o">:</span> <span class="k">public</span> <span class="n">MergeOperator</span> <span class="p">{</span>          <span class="c1">// not associative
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">FullMerge</span><span class="p">(</span><span class="k">const</span> <span class="n">Slice</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="k">const</span> <span class="n">Slice</span><span class="o">*</span> <span class="n">existing_value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">operand_list</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*</span> <span class="n">new_value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="n">Logger</span><span class="o">*</span> <span class="n">logger</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">JsonDataStructure</span> <span class="n">obj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">existing_value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">obj</span><span class="p">.</span><span class="n">ParseFrom</span><span class="p">(</span><span class="n">existing_value</span><span class="o">-&gt;</span><span class="n">ToString</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">IsInvalid</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">Log</span><span class="p">(</span><span class="n">logger</span><span class="p">,</span> <span class="s">&#34;Invalid json string after parsing: %s&#34;</span><span class="p">,</span> <span class="n">existing_value</span><span class="o">-&gt;</span><span class="n">ToString</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="nl">value</span> <span class="p">:</span> <span class="n">operand_list</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">auto</span> <span class="n">split_vector</span> <span class="o">=</span> <span class="n">Split</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="s">&#34; = &#34;</span><span class="p">);</span>      <span class="c1">// &#34;xyz[0] = 5&#34; might return [&#34;xyz[0]&#34;, 5] as an std::vector, etc.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">obj</span><span class="p">.</span><span class="n">SelectFromHierarchy</span><span class="p">(</span><span class="n">split_vector</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">=</span> <span class="n">split_vector</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">IsInvalid</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Log</span><span class="p">(</span><span class="n">logger</span><span class="p">,</span> <span class="s">&#34;Invalid json after parsing operand: %s&#34;</span><span class="p">,</span> <span class="n">value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">obj</span><span class="p">.</span><span class="n">SerializeTo</span><span class="p">(</span><span class="n">new_value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// Partial-merge two operands if and only if the two operands
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// both update the same value. If so, take the &#34;later&#34; operand.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">virtual</span> <span class="kt">bool</span> <span class="nf">PartialMerge</span><span class="p">(</span><span class="k">const</span> <span class="n">Slice</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="k">const</span> <span class="n">Slice</span><span class="o">&amp;</span> <span class="n">left_operand</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="k">const</span> <span class="n">Slice</span><span class="o">&amp;</span> <span class="n">right_operand</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*</span> <span class="n">new_value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">Logger</span><span class="o">*</span> <span class="n">logger</span><span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">split_vector1</span> <span class="o">=</span> <span class="n">Split</span><span class="p">(</span><span class="n">left_operand</span><span class="p">,</span> <span class="s">&#34; = &#34;</span><span class="p">);</span>   <span class="c1">// &#34;xyz[0] = 5&#34; might return [&#34;xyz[0]&#34;, 5] as an std::vector, etc.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">auto</span> <span class="n">split_vector2</span> <span class="o">=</span> <span class="n">Split</span><span class="p">(</span><span class="n">right_operand</span><span class="p">,</span> <span class="s">&#34; = &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// If the two operations update the same value, just take the later one.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">split_vector1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">split_vector2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">new_value</span><span class="o">-&gt;</span><span class="n">assign</span><span class="p">(</span><span class="n">right_operand</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">right_operand</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">virtual</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="nf">Name</span><span class="p">()</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;JsonMergeOperator&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// How to use it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">DB</span><span class="o">*</span> <span class="n">dbp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Options</span> <span class="n">options</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">options</span><span class="p">.</span><span class="n">merge_operator</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">JsonMergeOperator</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">DB</span><span class="o">::</span><span class="n">Open</span><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="s">&#34;/tmp/db&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dbp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">DB</span><span class="o">&gt;</span> <span class="n">db_</span><span class="p">(</span><span class="n">dbp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Put/store the json string into to the database
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">db_</span><span class="o">-&gt;</span><span class="n">Put</span><span class="p">(</span><span class="n">put_option_</span><span class="p">,</span> <span class="s">&#34;json_obj_key&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="s">&#34;{ employees: [ {first_name: john, last_name: doe}, {first_name: adam, last_name: smith}] }&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Use the &#34;merge operator&#34; to incrementally update the value of the json string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">db_</span><span class="o">-&gt;</span><span class="n">Merge</span><span class="p">(</span><span class="n">merge_option_</span><span class="p">,</span> <span class="s">&#34;json_obj_key&#34;</span><span class="p">,</span> <span class="s">&#34;employees[1].first_name = lucy&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">db_</span><span class="o">-&gt;</span><span class="n">Merge</span><span class="p">(</span><span class="n">merge_option_</span><span class="p">,</span> <span class="s">&#34;json_obj_key&#34;</span><span class="p">,</span> <span class="s">&#34;employees[0].last_name = dow&#34;</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="compaction-filter">Compaction Filter</h4>
<p>Compaction Filter是用来在compaction的时候执行一些自定义操作比如：根据ttl删除值，删除特定范围的键值对等等。</p>
<p>接口可以在rocksdb/compaction_filter.h文件里面找到.</p>
<p>有两种方式可以使用compaction filter:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">options</span><span class="p">.</span><span class="n">compaction_filter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CustomCompactionFilter</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// or
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">options</span><span class="p">.</span><span class="n">compaction_filter_factory</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">CustomCompactionFilterFactory</span><span class="p">());</span>
</span></span></code></pre></div><p>这两种方式对并发有不同的要求：</p>
<ol>
<li>compaction_filter: 一个compaction filter实例会被多个线程共享，所以需要保证线程安全。</li>
<li>compaction_filter_factory: 每个线程会有一个compaction filter实例，所以不需要保证线程安全。</li>
</ol>
<blockquote>
<p>Compaction filter will not be invoked during flush, despite arguably flush is a special type of compaction.
When merge is being used, compaction filter is invoked per merge operand. The result of compaction filter is applied to the merge operand before merge operator is invoked.</p>
</blockquote>
<p>有两套API来实现compaction filter:</p>
<ol>
<li>Filter/FilterMergeOperand 作用有限</li>
<li>FilterV2 changing the value, or dropping a range of keys starting from the current key.</li>
</ol>
<h4 id="reference">Reference</h4>
<p><a href="https://segmentfault.com/a/1190000041198407">简单介绍</a>
<a href="https://wanghenshui.github.io/rocksdb-doc-cn/">rocksdb文档的翻译</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>docker-images</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/10/15/category/docker-images/</link>
      <pubDate>Sun, 15 Oct 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/10/15/category/docker-images/</guid>
      <description>介绍容器和镜像</description>
      <content:encoded><![CDATA[<p><a href="https://www.cnblogs.com/koktlzz/p/14365025.html">介绍容器和镜像</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>go-redis-note</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/10/08/category/go-redis-note/</link>
      <pubDate>Sun, 08 Oct 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/10/08/category/go-redis-note/</guid>
      <description>记录go-redis使用过程中的一些事项 分布式锁(一上来就是大菜) 最近在阅读两个项目的时候都发现了分布式锁： osproxy： 分片上传时抢锁 r</description>
      <content:encoded><![CDATA[<h2 id="记录go-redis使用过程中的一些事项">记录go-redis使用过程中的一些事项</h2>
<h3 id="分布式锁一上来就是大菜">分布式锁(一上来就是大菜)</h3>
<p>最近在阅读两个项目的时候都发现了分布式锁：</p>
<ol>
<li>osproxy： 分片上传时抢锁</li>
<li>redis-tool： 本来就是教你redis操作的。。。。。。</li>
</ol>
<p>redis的事务和原子性可以看<a href="https://blog.yehaohui.com/zh-cn/2023/09/13/category/redis_basic/">这里记录的一些文章</a></p>
<p>分布式锁的应用场景: <a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%9845%E8%AE%B2-%E5%AE%8C/11%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E5%92%8C%E5%AE%9E%E7%8E%B0%EF%BC%9F.md">分布式锁有哪些应用场景和实现？</a></p>
<p>于是记录一下go-redis中的实践：</p>
<p>要注意的几个点：</p>
<ol>
<li>是否可重入</li>
<li>释放锁的方式</li>
</ol>
<h4 id="首先来看看osproxy中是怎么做的">首先来看看osproxy中是怎么做的</h4>
<p>首先是调用接口的例子，这里是一个分片上传的例子，需要抢锁，然后判断是否已经上传过了，如果上传过了就直接返回成功，如果没有上传过就去上传，上传成功后再去释放锁，因为实际上Web 服务器在处理请求的时候是并发的，所以需要抢锁，防止多个请求同时上传同一个文件的同一个分片，这样就会导致文件上传失败。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">lgRedis</span> <span class="p">=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">LangGoRedis</span><span class="p">).</span><span class="nf">NewRedis</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">createLock</span> <span class="o">:=</span> <span class="nx">base</span><span class="p">.</span><span class="nf">NewRedisLock</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">lgRedis</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;multi-part-%d-%d-%s&#34;</span><span class="p">,</span> <span class="nx">uid</span><span class="p">,</span> <span class="nx">chunkNum</span><span class="p">,</span> <span class="nx">md5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">flag</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">createLock</span><span class="p">.</span><span class="nf">Acquire</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">||</span> <span class="p">!</span><span class="nx">flag</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lgLogger</span><span class="p">.</span><span class="nf">WithContext</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;上传多文件抢锁失败&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">web</span><span class="p">.</span><span class="nf">InternalError</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="s">&#34;上传多文件抢锁失败&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">partInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">repo</span><span class="p">.</span><span class="nf">NewMultiPartInfoRepo</span><span class="p">().</span><span class="nf">GetPartInfo</span><span class="p">(</span><span class="nx">lgDB</span><span class="p">,</span> <span class="nx">uid</span><span class="p">,</span> <span class="nx">chunkNum</span><span class="p">,</span> <span class="nx">md5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lgLogger</span><span class="p">.</span><span class="nf">WithContext</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;多文件上传，查询分片信息失败&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">web</span><span class="p">.</span><span class="nf">InternalError</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="s">&#34;内部异常&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">partInfo</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">web</span><span class="p">.</span><span class="nf">Success</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">createLock</span><span class="p">.</span><span class="nf">Release</span><span class="p">()</span>
</span></span></code></pre></div><p>接下来看一下<code> RedisLock</code>的实现</p>
<p>创建RedisLock，获取锁其实就是通过Eval命令去执行lua脚本。</p>
<p>关键就是这个lua脚本通过获取key的值判断是否与自己线程的唯一id对应，如果对应就返回OK，如果不对应就尝试set(不存在才set)，然后通过判断返回值来判断是否获取到锁。</p>
<p>注意这里还可以完成可重入锁的功能。</p>
<p>释放锁的时候，通过判断key的值是否与自己线程的唯一id对应，如果对应就删除key，如果不对应(过期或者被别的占了)就返回0。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">letters</span>     <span class="p">=</span> <span class="s">&#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lockCommand</span> <span class="p">=</span> <span class="s">`if redis.call(&#34;GET&#34;, KEYS[1]) == ARGV[1] then
</span></span></span><span class="line"><span class="cl"><span class="s">                      redis.call(&#34;SET&#34;, KEYS[1], ARGV[1], &#34;PX&#34;, ARGV[2])
</span></span></span><span class="line"><span class="cl"><span class="s">                      return &#34;OK&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">                   else
</span></span></span><span class="line"><span class="cl"><span class="s">                       return redis.call(&#34;SET&#34;, KEYS[1], ARGV[1], &#34;NX&#34;, &#34;PX&#34;, ARGV[2])
</span></span></span><span class="line"><span class="cl"><span class="s">                   end`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">delCommand</span> <span class="p">=</span> <span class="s">`if redis.call(&#34;GET&#34;, KEYS[1]) == ARGV[1] then
</span></span></span><span class="line"><span class="cl"><span class="s">                      return redis.call(&#34;DEL&#34;, KEYS[1])
</span></span></span><span class="line"><span class="cl"><span class="s">                  else
</span></span></span><span class="line"><span class="cl"><span class="s">                      return 0
</span></span></span><span class="line"><span class="cl"><span class="s">                  end`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">randomLen</span> <span class="p">=</span> <span class="mi">16</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 默认超时时间，防止死锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tolerance</span>       <span class="p">=</span> <span class="mi">500</span> <span class="c1">// milliseconds
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">millisPerSecond</span> <span class="p">=</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NewRedisLock returns a RedisLock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewRedisLock</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">store</span> <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">RedisLock</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">RedisLock</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctx</span><span class="p">:</span>   <span class="nx">c</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">store</span><span class="p">:</span> <span class="nx">store</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">key</span><span class="p">:</span>   <span class="nx">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 获取锁时，锁的值通过随机字符串生成
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 实际上go-zero提供更加高效的随机字符串生成方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 见core/stringx/random.go：Randn
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">id</span><span class="p">:</span> <span class="nf">randomStr</span><span class="p">(</span><span class="nx">randomLen</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Acquire acquires the lock.
</span></span></span><span class="line"><span class="cl"><span class="c1">// 加锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">rl</span> <span class="o">*</span><span class="nx">RedisLock</span><span class="p">)</span> <span class="nf">Acquire</span><span class="p">()</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取过期时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">seconds</span> <span class="o">:=</span> <span class="nx">atomic</span><span class="p">.</span><span class="nf">LoadUint32</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">rl</span><span class="p">.</span><span class="nx">seconds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 默认锁过期时间为500ms，防止死锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">res</span> <span class="o">:=</span> <span class="nx">rl</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="o">*</span><span class="nx">rl</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">lockCommand</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">rl</span><span class="p">.</span><span class="nx">key</span><span class="p">},</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rl</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nx">seconds</span><span class="p">)</span><span class="o">*</span><span class="nx">millisPerSecond</span> <span class="o">+</span> <span class="nx">tolerance</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">res</span><span class="p">.</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;lock failed %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">resp</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">reply</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">resp</span><span class="p">).(</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ok</span> <span class="o">&amp;&amp;</span> <span class="nx">reply</span> <span class="o">==</span> <span class="s">&#34;OK&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Unknown reply when acquiring lock for %s: %v&#34;</span><span class="p">,</span> <span class="nx">rl</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Release releases the lock.
</span></span></span><span class="line"><span class="cl"><span class="c1">// 释放锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">rl</span> <span class="o">*</span><span class="nx">RedisLock</span><span class="p">)</span> <span class="nf">Release</span><span class="p">()</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span> <span class="o">:=</span> <span class="nx">rl</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="o">*</span><span class="nx">rl</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">delCommand</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">rl</span><span class="p">.</span><span class="nx">key</span><span class="p">},</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">rl</span><span class="p">.</span><span class="nx">id</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">res</span><span class="p">.</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">reply</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">resp</span><span class="p">).(</span><span class="kt">int64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">reply</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="接下来看看redis-tool中是怎么做的">接下来看看redis-tool中是怎么做的</h4>
<p>首先看调用基本也是传一个client和key。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">redis</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Addr</span><span class="p">:</span>     <span class="s">&#34;localhost:6378&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Password</span><span class="p">:</span> <span class="s">&#34;123456&#34;</span><span class="p">,</span> <span class="c1">// no password set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">DB</span><span class="p">:</span>       <span class="mi">0</span><span class="p">,</span>        <span class="c1">// use default DB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">disLock</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tools</span><span class="p">.</span><span class="nf">NewRedisLock</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="s">&#34;lock resource&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">succ</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">disLock</span><span class="p">.</span><span class="nf">TryLock</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">succ</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">disLock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>实现起来,unlock方法其实也是基于上面的那个lua脚本(compare and delete)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rl</span> <span class="o">*</span><span class="nx">RedisLock</span><span class="p">)</span> <span class="nf">TryLock</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">succ</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rl</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">SetNX</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">rl</span><span class="p">.</span><span class="nx">Key</span><span class="p">,</span> <span class="nx">rl</span><span class="p">.</span><span class="nx">uuid</span><span class="p">,</span> <span class="nx">defaultExp</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">||</span> <span class="p">!</span><span class="nx">succ</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rl</span><span class="p">.</span><span class="nx">cancelFunc</span> <span class="p">=</span> <span class="nx">cancel</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rl</span><span class="p">.</span><span class="nf">refresh</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">succ</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rl</span> <span class="o">*</span><span class="nx">RedisLock</span><span class="p">)</span> <span class="nf">Unlock</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewTools</span><span class="p">(</span><span class="nx">rl</span><span class="p">.</span><span class="nx">Client</span><span class="p">).</span><span class="nf">Cad</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">rl</span><span class="p">.</span><span class="nx">Key</span><span class="p">,</span> <span class="nx">rl</span><span class="p">.</span><span class="nx">uuid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">resp</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rl</span><span class="p">.</span><span class="nf">cancelFunc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">resp</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>大三上 第四周</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/20/category/%E5%A4%A7%E4%B8%89%E4%B8%8A-%E7%AC%AC%E5%9B%9B%E5%91%A8/</link>
      <pubDate>Wed, 20 Sep 2023 16:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/20/category/%E5%A4%A7%E4%B8%89%E4%B8%8A-%E7%AC%AC%E5%9B%9B%E5%91%A8/</guid>
      <description>周记 实际上已经很久没有写过周记了，上学期学业压力比较大，暑假又去广发实习了一个月，感觉生活总是很匆忙。这个学期课比较少，又有一些ZBH的PM</description>
      <content:encoded><![CDATA[
<iframe  frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&amp;id=484056998&amp;auto=1&amp;height=66"></iframe>

<h2 id="周记">周记</h2>
<p>实际上已经很久没有写过周记了，上学期学业压力比较大，暑假又去广发实习了一个月，感觉生活总是很匆忙。这个学期课比较少，又有一些ZBH的PM这种课，所以逐渐松弛了下来，是时候静下来写点东西和自己对话了。</p>
<h3 id="人">人</h3>
<p>社交范围越来越小了，近半年来几乎没有认识什么人(这里的认识是至少加了微信)，但是在人际关系上却不能说没有收获。自从暑假和秋科，郭老师他们一起去潮汕玩了之后，我和正平交流逐渐多了起来，如果说李佳琪是我交友的模版标准，正平就是让我在大学里第一次感觉到势均力敌的友谊。首先，他为人真诚，待人处事都颇为细心，也会照顾到别人的情绪。我和他的很多想法类似，甚至我开学想送他的一套书他刚好也看过，然后我向他推荐我看过的书他目前也在看hhhh。</p>
<blockquote>
<p>女朋友还在来的路上。</p>
</blockquote>
<h3 id="事">事</h3>
<h4 id="heading"></h4>
<h4 id="heading-1"></h4>
<h3 id="思">思</h3>
<p>努力修炼吧！</p>
<p><img src="https://s2.loli.net/2023/09/21/JDaqRH9Mjc1kLYw.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2023/09/21/TKl21I7WOrFBkmo.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2023/09/21/dQf4m1cz5lgsKkP.png" alt="image.png"></p>
<h3 id="书">书</h3>
<h3 id="影">影</h3>
<p><a href="https://movie.douban.com/subject/3072086/">(500) Days of Summer</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>osproxy-intro</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/19/category/osproxy-intro/</link>
      <pubDate>Tue, 19 Sep 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/19/category/osproxy-intro/</guid>
      <description>osproxy osproxy 这个算是第一个接触的比较正式的项目，期望从中学到 go框架: gin(其实之前就用过，这次算巩固), gorm , viper, zap, swagger&amp;hellip;&amp;hellip; docker 部署 开发的一些规范 设计一个软</description>
      <content:encoded><![CDATA[<h2 id="osproxy">osproxy</h2>
<p><a href="https://juejin.cn/post/7242284648021131323">osproxy</a></p>
<p>这个算是第一个接触的比较正式的项目，期望从中学到</p>
<ol>
<li>go框架: gin(其实之前就用过，这次算巩固), gorm , viper, zap, swagger&hellip;&hellip;</li>
<li>docker 部署</li>
<li>开发的一些规范 <a href="https://12factor.net/">设计一个软件(服务)的原则/最佳实践-12factors</a></li>
</ol>
<p>在学习过程中发现确实有这么一个规范：
<a href="https://github.com/golang-standards/project-layout/blob/master/README_zh.md">Standard Go Project Layout</a></p>
<h3 id="get-started">get-started</h3>
<p>参考<a href="https://github.com/qinguoyi/osproxy/blob/main/README.md">官方Readme</a></p>
<ol>
<li>前期配置</li>
</ol>
<p>按照提示把redis，pg，，minio(分布式对象存储)这些起起来。</p>
<ol start="2">
<li>服务启动</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 设置goproxy</span>
</span></span><span class="line"><span class="cl">Linux: go env -w <span class="nv">GOPROXY</span><span class="o">=</span>https://goproxy.cn,direct
</span></span><span class="line"><span class="cl">Windows: <span class="nv">$env</span>:GOPROXY <span class="o">=</span> <span class="s2">&#34;https://goproxy.cn&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 拉取依赖</span>
</span></span><span class="line"><span class="cl">go mod tidy
</span></span><span class="line"><span class="cl">go install github.com/swaggo/swag/cmd/swag@v1.8.1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 修改本地变量</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">app/pkg/utils/constant.go
</span></span><span class="line"><span class="cl">LocalStore变量, 更新成本地可访问的目录
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 生成api文档</span>
</span></span><span class="line"><span class="cl">swag fmt -g cmd/main.go -d ./
</span></span><span class="line"><span class="cl">swag init -g cmd/main.go
</span></span><span class="line"><span class="cl">http://127.0.0.1:8888/swagger/index.html#/
</span></span></code></pre></div><p>然后看swagger里面的文档一步步学习如何使用</p>
<h3 id="阅读项目">阅读项目</h3>
<p>从入口开始一步步整理文档</p>
<h4 id="配置日志和插件">配置，日志和插件</h4>
<h5 id="配置">配置</h5>
<p>项目一般都需要配置，把这些写在配置文件中是比较合理的选择，在程序的入口只需要提供配置文件的路径，然后读取配置文件，把配置文件的内容解析到结构体中，这样就可以在程序中使用了。</p>
<p>在golang中，一般使用viper这个库来读取配置文件，viper支持多种配置文件格式，比如json，yaml，toml等，这里使用yaml格式的配置文件。</p>
<p>viper 简单介绍：</p>
<p>它支持</p>
<ul>
<li>explicit call to Set</li>
<li>flag</li>
<li>env</li>
<li>config</li>
<li>key/value store</li>
<li>default</li>
</ul>
<p>这些配置方式，而且json，yaml(甚至java的配置文件)等不同类型的配置文件都可以无痛解析。命令行可以和同一个org的pflag和官方库的flag来一起使用。</p>
<p>接下来看看这个项目读取配置文件的项目结构。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># config 文件夹 存放配置结构体</span>
</span></span><span class="line"><span class="cl">config
</span></span><span class="line"><span class="cl">├── app.go
</span></span><span class="line"><span class="cl">├── config.go
</span></span><span class="line"><span class="cl">├── log.go
</span></span><span class="line"><span class="cl">├── plugins
</span></span><span class="line"><span class="cl">│   ├── cos.go
</span></span><span class="line"><span class="cl">│   ├── database.go
</span></span><span class="line"><span class="cl">│   ├── local.go
</span></span><span class="line"><span class="cl">│   ├── minio.go
</span></span><span class="line"><span class="cl">│   ├── oss.go
</span></span><span class="line"><span class="cl">│   └── redis.go
</span></span><span class="line"><span class="cl">└── README.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># bootstrap 目录，读取配置文件，初始化日志，插件等</span>
</span></span><span class="line"><span class="cl">bootstrap
</span></span><span class="line"><span class="cl">├── config.go
</span></span><span class="line"><span class="cl">├── log.go
</span></span><span class="line"><span class="cl">├── plugins
</span></span><span class="line"><span class="cl">│   ├── cos.go
</span></span><span class="line"><span class="cl">│   ├── database.go
</span></span><span class="line"><span class="cl">│   ├── local.go
</span></span><span class="line"><span class="cl">│   ├── minio.go
</span></span><span class="line"><span class="cl">│   ├── oss.go
</span></span><span class="line"><span class="cl">│   ├── plugins.go
</span></span><span class="line"><span class="cl">│   └── redis.go
</span></span><span class="line"><span class="cl">└── README.md
</span></span></code></pre></div><p>先来看看bootstrap目录下的config.go</p>
<p>主要包含的结构和变量是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">configPath</span>   <span class="kt">string</span>                     <span class="c1">//命令行接受的配置文件路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">rootPath</span>     <span class="p">=</span> <span class="s">&#34;&#34;</span> <span class="c1">// utils.RootPath()   //根目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lgConfig</span>     <span class="p">=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">LangGoConfig</span><span class="p">)</span>        <span class="c1">//全局配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">confFilePath</span> <span class="p">=</span> <span class="s">&#34;conf/config.yaml&#34;</span>       <span class="c1">//默认配置文件路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">LangGoConfig</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Conf</span> <span class="o">*</span><span class="nx">config</span><span class="p">.</span><span class="nx">Configuration</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Once</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">newLangGoConfig</span><span class="p">()</span> <span class="o">*</span><span class="nx">LangGoConfig</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">LangGoConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Conf</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">config</span><span class="p">.</span><span class="nx">Configuration</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Once</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>conf 是配置文件的结构体，once是一个同步锁，用来保证只初始化一次，newLangGoConfig作为包内函数用来初始化。</p>
<p>对外可见函数：</p>
<p>NewConfig用来返回全局唯一配置，他会根据lgConfig是否存在来决定是否初始化，如果已经初始化过了，就直接返回，否则就初始化。初始化是调用once.do 来initConfig，initConfig会完成配置文件的读取和解析，以及监听配置文件的变化来更新配置结构体(OnConfigChange)。</p>
<p>到这里配置文件就基本结束了。</p>
<p>总结： <del>全局变量保存信息，once.do实现安全并发单例，奇怪的点既然只会在项目开始调用NewConfig，那为什么还要用once和判断是否已经被初始化(作用冗余？)。</del> 实际上是每次要用Config都会调用NewConfig而不是一个全局变量传来传去。</p>
<h4 id="日志">日志</h4>
<p>使用zap(uber开发)来导入结构化日志，其实从Go 1.21 开始go官方就提供了slog库，但是zap的性能目前还是比较好，市场占有率也很高，所以还是有学习的必要，而且slog也大部分借鉴了zap的设计。</p>
<p><a href="https://betterstack.com/community/guides/logging/go/zap/">zap 的快速入门</a>(文章还挺新的，看完之后感觉特别不错)</p>
<p>顺便在这边做一些总结</p>
<h5 id="1">1</h5>
<p>zap 提供两种logger类型：SugaredLogger 和 Logger，SugaredLogger是Logger的一个包装，提供了更多的方法，但是性能上会差一些,在同一个程序中同时使用两种Logger是可以的，并根据场景来进行切换。</p>
<p>Logger 只接受结构化的K/V，SugaredLogger可以接受结构化的K/V，也可以接受printf风格的字符串(反射所以慢点)。</p>
<p>SugaredLogger可以用以w结尾的log来实现 loosely typed key/value pairs，也就是可以用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">    <span class="nx">sugar</span><span class="p">.</span><span class="nf">Infow</span><span class="p">(</span><span class="s">&#34;User logged in&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;username&#34;</span><span class="p">,</span> <span class="s">&#34;johndoe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;userid&#34;</span><span class="p">,</span> <span class="mi">123456</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">zap</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;provider&#34;</span><span class="p">,</span> <span class="s">&#34;google&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span></code></pre></div><h5 id="2">2</h5>
<p>从上到下逐渐变得严重，DebugLevel是最低的，FatalLevel是最高的，FatalLevel会在写完日志后调用os.Exit(1)来退出程序。DebugLevel可能会输出很多log，所以生产中最好不要有。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// DebugLevel logs are typically voluminous, and are usually disabled in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// production.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">DebugLevel</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">DebugLevel</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// InfoLevel is the default logging priority.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">InfoLevel</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">InfoLevel</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// WarnLevel logs are more important than Info, but don&#39;t need individual
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// human review.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">WarnLevel</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">WarnLevel</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ErrorLevel logs are high-priority. If an application is running smoothly,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// it shouldn&#39;t generate any error-level logs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ErrorLevel</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">ErrorLevel</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// DPanicLevel logs are particularly important errors. In development the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// logger panics after writing the message.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">DPanicLevel</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">DPanicLevel</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// PanicLevel logs a message, then panics.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">PanicLevel</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">PanicLevel</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// FatalLevel logs a message, then calls os.Exit(1).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">FatalLevel</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">FatalLevel</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><h5 id="3">3</h5>
<p>配置自定义的日志格式有点麻烦，所以包提供了预设的几种 zap.NewExample(DebugLevel &amp; omits the timestamp and calling function) or zap.NewProduction(InfoLevel ), or zap.NewDevelopment(DebugLevel )</p>
<h5 id="4">4</h5>
<p>可以根据环境变量切换日志级别，比如在开发环境下，可以设置环境变量 LOG_LEVEL=debug，这样就可以输出debug级别的日志了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">logger</span> <span class="o">:=</span> <span class="nx">zap</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">zap</span><span class="p">.</span><span class="nf">NewProduction</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;APP_ENV&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#34;development&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">logger</span> <span class="p">=</span> <span class="nx">zap</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">zap</span><span class="p">.</span><span class="nf">NewDevelopment</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h5 id="5">5</h5>
<p>默认的全局日志器是空指针，但是可以用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">zap</span><span class="p">.</span><span class="nf">ReplaceGlobals</span><span class="p">(</span><span class="nx">zap</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">zap</span><span class="p">.</span><span class="nf">NewProduction</span><span class="p">()))</span>
</span></span></code></pre></div><p>这来改变</p>
<h5 id="6">6</h5>
<p>自定义日志</p>
<p>EncoderConfig是用来表示primitive key (level ，timestamp)这些key的key值，还有time这些的输出格式。</p>
<p>Config</p>
<blockquote>
<p><strong>OutputPaths</strong> specifies one or more targets for the logging output (see Open for more details).</p>
</blockquote>
<blockquote>
<p><strong>ErrorOutputPaths</strong> is similar to OutputPaths but is used for Zap&rsquo;s internal errors only, not those generated or logged by your application (such as the error from mismatched loosely-typed key/value pairs).</p>
</blockquote>
<blockquote>
<p><strong>InitialFields</strong> specifies global contextual fields that should be included in every log entry produced by each logger created from the Config object. We&rsquo;re only including the process ID of the program here, but you can add other useful global metadata like the Go version running the program, git commit hash or application version, environment or deployment information, and more.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">createLogger</span><span class="p">()</span> <span class="o">*</span><span class="nx">zap</span><span class="p">.</span><span class="nx">Logger</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">encoderCfg</span> <span class="o">:=</span> <span class="nx">zap</span><span class="p">.</span><span class="nf">NewProductionEncoderConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">encoderCfg</span><span class="p">.</span><span class="nx">TimeKey</span> <span class="p">=</span> <span class="s">&#34;timestamp&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">encoderCfg</span><span class="p">.</span><span class="nx">EncodeTime</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">ISO8601TimeEncoder</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">config</span> <span class="o">:=</span> <span class="nx">zap</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Level</span><span class="p">:</span>             <span class="nx">zap</span><span class="p">.</span><span class="nf">NewAtomicLevelAt</span><span class="p">(</span><span class="nx">zap</span><span class="p">.</span><span class="nx">InfoLevel</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Development</span><span class="p">:</span>       <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">DisableCaller</span><span class="p">:</span>     <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">DisableStacktrace</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Sampling</span><span class="p">:</span>          <span class="kc">nil</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Encoding</span><span class="p">:</span>          <span class="s">&#34;json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">EncoderConfig</span><span class="p">:</span>     <span class="nx">encoderCfg</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">OutputPaths</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;stderr&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">ErrorOutputPaths</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;stderr&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">InitialFields</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;pid&#34;</span><span class="p">:</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getpid</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">zap</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nf">Build</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>回到osproxy的日志初始化来</p>
<p>创建和调用基本类似config的实现，总的来说也没什么特别的操作。
基本上就是生成core的一些配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getZapCore</span><span class="p">(</span><span class="nx">conf</span> <span class="o">*</span><span class="nx">config</span><span class="p">.</span><span class="nx">Configuration</span><span class="p">)</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">Core</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">encoder</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">Encoder</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 调整编码器默认配置 输出内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">encoderConfig</span> <span class="o">:=</span> <span class="nx">zap</span><span class="p">.</span><span class="nf">NewProductionEncoderConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">encoderConfig</span><span class="p">.</span><span class="nx">EncodeTime</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">time</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">encoder</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">PrimitiveArrayEncoder</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">encoder</span><span class="p">.</span><span class="nf">AppendString</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span><span class="s">&#34;[&#34;</span> <span class="o">+</span> <span class="s">&#34;2006-01-02 15:04:05.000&#34;</span> <span class="o">+</span> <span class="s">&#34;]&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">encoderConfig</span><span class="p">.</span><span class="nx">EncodeLevel</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">l</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">Level</span><span class="p">,</span> <span class="nx">encoder</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">PrimitiveArrayEncoder</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">encoder</span><span class="p">.</span><span class="nf">AppendString</span><span class="p">(</span><span class="nx">conf</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Env</span> <span class="o">+</span> <span class="s">&#34;.&#34;</span> <span class="o">+</span> <span class="nx">l</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置编码器，日志的输出格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nx">Format</span> <span class="o">==</span> <span class="s">&#34;json&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">encoder</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nf">NewJSONEncoder</span><span class="p">(</span><span class="nx">encoderConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">encoder</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nf">NewConsoleEncoder</span><span class="p">(</span><span class="nx">encoderConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 同时输出到控制台和文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">multiWS</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">WriteSyncer</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nx">EnableFile</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">multiWS</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nf">NewMultiWriteSyncer</span><span class="p">(</span><span class="nf">getLogWriter</span><span class="p">(</span><span class="nx">conf</span><span class="p">),</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nf">AddSync</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">multiWS</span> <span class="p">=</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nf">AddSync</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nf">NewCore</span><span class="p">(</span><span class="nx">encoder</span><span class="p">,</span> <span class="nx">multiWS</span><span class="p">,</span> <span class="nx">level</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 使用 lumberjack 作为日志写入器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">getLogWriter</span><span class="p">(</span><span class="nx">conf</span> <span class="o">*</span><span class="nx">config</span><span class="p">.</span><span class="nx">Configuration</span><span class="p">)</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nx">WriteSyncer</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">file</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">lumberjack</span><span class="p">.</span><span class="nx">Logger</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Filename</span><span class="p">:</span>   <span class="nx">conf</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nx">RootDir</span> <span class="o">+</span> <span class="s">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nx">Filename</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MaxSize</span><span class="p">:</span>    <span class="nx">conf</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nx">MaxSize</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MaxBackups</span><span class="p">:</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nx">MaxBackups</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MaxAge</span><span class="p">:</span>     <span class="nx">conf</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nx">MaxAge</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Compress</span><span class="p">:</span>   <span class="nx">conf</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nx">Compress</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">zapcore</span><span class="p">.</span><span class="nf">AddSync</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="plugin">plugin</h4>
<p>搞了个插件接口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bootstrap/plugins
</span></span><span class="line"><span class="cl">├── cos.go
</span></span><span class="line"><span class="cl">├── database.go
</span></span><span class="line"><span class="cl">├── local.go
</span></span><span class="line"><span class="cl">├── minio.go
</span></span><span class="line"><span class="cl">├── oss.go
</span></span><span class="line"><span class="cl">├── plugins.go
</span></span><span class="line"><span class="cl">└── redis.go
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Plugin 插件接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Plugin</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Flag 是否启动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Flag</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Name 插件名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Name</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// New 初始化插件资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">New</span><span class="p">()</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Health 插件健康检查
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Health</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Close 释放插件资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然后各个服务实现这些个接口,并且在每个实现里面都有init函数将自己注册到全局Plugin里面，但是细看了下发现其实蛮怪的。
比如redis plugin，它是在init函数里面注册的，但是注册的方式是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">LangGoRedis</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">RegisteredPlugin</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然后在plugin的Newplugin()，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewPlugins</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">p</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">Plugins</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">p</span><span class="p">.</span><span class="nf">Flag</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">bootstrap</span><span class="p">.</span><span class="nf">NewLogger</span><span class="p">().</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s Init ... &#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nf">Name</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">bootstrap</span><span class="p">.</span><span class="nf">NewLogger</span><span class="p">().</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s HealthCheck ... &#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nf">Name</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">.</span><span class="nf">Health</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">bootstrap</span><span class="p">.</span><span class="nf">NewLogger</span><span class="p">().</span><span class="nx">Logger</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s Success Init. &#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nf">Name</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>redis是必须要用的，所以这里的flag是直接返回true，别的类似oss服务就是通过配置来返回的。</p>
<p>但是这里的new，又是初始化全局redis变量,在项目别的地方调用又是
<code>var lgRedis = new(plugins.LangGoRedis).NewRedis()</code></p>
<p>总之感觉很不make sense</p>
<p>后面发现其实这里NewPlugin是用来初始化并检测插件，后面<code>new(plugins.LangGoRedis).NewRedis()</code>就是直接调用之前初始化的全局变量了。</p>
<h4 id="snowflake-雪花算法">snowflake 雪花算法</h4>
<p><img src="https://pic4.zhimg.com/80/v2-0ca4a4125b1cbda69cfa972b1e568ffb_720w.webp" alt=""></p>
<p>1.第一位 占用1bit，其值始终是0，没有实际作用。 2.时间戳 占用41bit，精确到毫秒，总共可以容纳约69年的时间。 3.工作机器id 占用10bit，其中高位5bit是数据中心ID，低位5bit是工作节点ID，做多可以容纳1024个节点。 4.序列号 占用12bit，每个节点每毫秒0开始不断累加，最多可以累加到4095，一共可以产生4096个ID。</p>
<blockquote>
<p>SnowFlake算法在同一毫秒内最多可以生成多少个全局唯一ID呢：： 同一毫秒的ID数量 = 1024 X 4096 = 4194304</p>
</blockquote>
<h4 id="cmdmain">cmd/main</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// @title        ObjectStorageProxy
</span></span></span><span class="line"><span class="cl"><span class="c1">// @version    1.0
</span></span></span><span class="line"><span class="cl"><span class="c1">// @description
</span></span></span><span class="line"><span class="cl"><span class="c1">// @contact.name    qinguoyi
</span></span></span><span class="line"><span class="cl"><span class="c1">// @host                127.0.0.1:8888
</span></span></span><span class="line"><span class="cl"><span class="c1">// @BasePath          /
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// config log
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lgConfig</span> <span class="o">:=</span> <span class="nx">bootstrap</span><span class="p">.</span><span class="nf">NewConfig</span><span class="p">(</span><span class="s">&#34;conf/config.yaml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lgLogger</span> <span class="o">:=</span> <span class="nx">bootstrap</span><span class="p">.</span><span class="nf">NewLogger</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// plugins DB Redis Minio
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">plugins</span><span class="p">.</span><span class="nf">NewPlugins</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">plugins</span><span class="p">.</span><span class="nf">ClosePlugins</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// init Snowflake
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">base</span><span class="p">.</span><span class="nf">InitSnowFlake</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// init storage
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">storage</span><span class="p">.</span><span class="nf">InitStorage</span><span class="p">(</span><span class="nx">lgConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// router
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">engine</span> <span class="o">:=</span> <span class="nx">api</span><span class="p">.</span><span class="nf">NewRouter</span><span class="p">(</span><span class="nx">lgConfig</span><span class="p">,</span> <span class="nx">lgLogger</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">server</span> <span class="o">:=</span> <span class="nx">app</span><span class="p">.</span><span class="nf">NewHttpServer</span><span class="p">(</span><span class="nx">lgConfig</span><span class="p">,</span> <span class="nx">engine</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// app run-server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">application</span> <span class="o">:=</span> <span class="nx">app</span><span class="p">.</span><span class="nf">NewApp</span><span class="p">(</span><span class="nx">lgConfig</span><span class="p">,</span> <span class="nx">lgLogger</span><span class="p">.</span><span class="nx">Logger</span><span class="p">,</span> <span class="nx">server</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">application</span><span class="p">.</span><span class="nf">RunServer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>目前配置部分差不多完成，接下来的路由和存储服务请见osproxy-core</p>
<h3 id="总结">总结</h3>
<p>OSproxy的配置差不多到这里.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>interview-八股</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/17/category/interview-%E5%85%AB%E8%82%A1/</link>
      <pubDate>Sun, 17 Sep 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/17/category/interview-%E5%85%AB%E8%82%A1/</guid>
      <description>network 工具： tcpdump Wireshark 具体一些没背八股前不清晰的问题： Cookie&amp;amp;session 你真的了解cookie和session吗 鉴权&amp;amp;Token 鉴权界的后起之秀：Token鉴</description>
      <content:encoded><![CDATA[<h3 id="network">network</h3>
<h4 id="工具">工具：</h4>
<ol>
<li>tcpdump</li>
<li>Wireshark</li>
</ol>
<h4 id="具体一些没背八股前不清晰的问题">具体一些没背八股前不清晰的问题：</h4>
<ol>
<li>
<p>Cookie&amp;session <a href="https://www.cnblogs.com/ityouknow/p/10856177.html">你真的了解cookie和session吗</a></p>
</li>
<li>
<p>鉴权&amp;Token <a href="https://juejin.cn/post/7017821497980878878">鉴权界的后起之秀：Token鉴权方案</a> <a href="https://zhuanlan.zhihu.com/p/395273289">鉴权必须了解的5个兄弟：cookie、session、token、jwt、单点登录</a></p>
</li>
<li>
<p>数据从网卡到应用的过程  <a href="https://blog.csdn.net/JMW1407/article/details/108636657">计算机网络——数据从网卡到应用的过程</a>  <a href="https://blog.csdn.net/u012796139/article/details/106184401">网络数据是如何传递给进程的</a> <a href="https://zhuanlan.zhihu.com/p/256428917">很顶</a> <a href="https://morven.life/posts/networking-1-pkg-snd-rcv/">个人博客 也很厉害</a></p>
</li>
<li>
<p>ARP协议（不是很记得了）  <a href="https://zhuanlan.zhihu.com/p/370507243">彻底搞懂系列之：ARP协议</a></p>
</li>
<li>
<p>http的几个版本 <a href="https://cloud.tencent.com/developer/article/1857670"> HTTP 版本区别</a></p>
</li>
<li>
<p>跨域问题 <a href="https://juejin.cn/post/6983852288091619342">面试官问我CORS跨域，我直接一套操作斩杀！</a></p>
</li>
</ol>
<h4 id="实战">实战</h4>
<p><a href="https://juejin.cn/post/6844903834708344840">关于三次握手与四次挥手面试官想考我们什么？&mdash; 不看后悔系列</a></p>
<h4 id="reference">Reference</h4>
<p><a href="https://www.iamshuaidi.com/673.html">帅地玩编程</a></p>
<p>小林coding</p>
<p><a href="https://blog.csdn.net/fighting_tl/article/details/104697207">字节跳动面试之&mdash;计算机网络</a>
<a href="https://zhuanlan.zhihu.com/p/422455960">字节计算机网络面试</a>
<a href="https://juejin.cn/post/6939691851746279437">前端计算机网络面经</a></p>
<p><a href="https://segmentfault.com/a/1190000038526729">计算机网络面经总结</a></p>
<h3 id="mysql">Mysql</h3>
<h4 id="binlog">binlog</h4>
<p>binlog是server层的功能</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/33504555">腾讯工程师带你深入解析 MySQL binlog</a></li>
<li><a href="https://www.cnblogs.com/martinzhang/p/3454358.html">MySQL的binlog日志</a></li>
<li><a href="https://www.cnblogs.com/rickiyang/p/13841811.html">带你了解 MySQL Binlog 不为人知的秘密</a></li>
<li><a href="https://m.haicoder.net/note/mysql-interview/mysql-interview-mysql-binlog.html">binlog面试</a></li>
</ol>
<h3 id="os">os</h3>
<ol>
<li><a href="https://www.cnblogs.com/Anker/p/3271773.html">孤儿进程与僵尸进程</a></li>
<li>DMA  <a href="https://www.cnblogs.com/wkfvawl/p/10958751.html">dma</a></li>
</ol>
<h3 id="大杂烩">大杂烩</h3>
<p><a href="https://zhuanlan.zhihu.com/p/662062549">redis zookeeper</a></p>
<h3 id="算法">算法</h3>
<p><a href="https://juejin.cn/post/6844904089650724872">100 算法</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>yehh-wiki</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/16/category/yehh-wiki/</link>
      <pubDate>Sat, 16 Sep 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/16/category/yehh-wiki/</guid>
      <description>???? 设计一个软件(服务)的原则/最佳实践-12factors Standard Go Project Layout golang 有用的库 viper 配置库 fsnotify 跨平台的文件提醒(一般是文件修改的提醒吧) zap/zapcore zap get-started 云原生</description>
      <content:encoded><![CDATA[<h2 id="heading">????</h2>
<p><a href="https://12factor.net/">设计一个软件(服务)的原则/最佳实践-12factors</a>
<a href="https://github.com/golang-standards/project-layout">Standard Go Project Layout</a></p>
<h2 id="golang-有用的库">golang 有用的库</h2>
<ol>
<li>viper 配置库</li>
<li>fsnotify 跨平台的文件提醒(一般是文件修改的提醒吧)</li>
<li>zap/zapcore <a href="https://betterstack.com/community/guides/logging/go/zap/">zap get-started</a></li>
</ol>
<h2 id="云原生一些好的links">云原生一些好的links</h2>
<p><a href="https://morven.life/posts/create-your-own-cni-with-golang/">使用 Go 从零开始实现 CNI 里面有很多入门的文章</a></p>
<h2 id="doc">doc</h2>
<p><a href="https://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents">bash manual</a></p>
<h2 id="linux">Linux</h2>
<p><a href="https://learnku.com/articles/24924">调教你的VIM-for gopher</a></p>
<h2 id="general-good-links">general good links</h2>
<p><a href="https://morven.life/">NJU本硕 RedHat大佬</a>
<a href="https://lotabout.me">大杂烩型博主，云，Linux</a></p>
<p><a href="https://jiejaitt.github.io/">不知道咋样，先记着</a>
<a href="https://linzyblog.netlify.app/">入门go的好博客</a></p>
<h2 id="有用的工具">有用的工具</h2>
<p><a href="https://zyro.com/tools/image-upscaler">图片上采样，非常好用</a></p>
<h2 id="厉害的博主">厉害的博主</h2>
<p><a href="https://immmmm.com/friends/">木木木木木</a></p>
<p><a href="https://learn.lianglianglee.com/">从go到微服务到架构师到恋爱指导应有尽有 Fxxking crazy!!!!!</a></p>
<p><a href="https://www.lixueduan.com/tags/etcd/">有很多go infra 云原生相关的</a></p>
<p><a href="https://icodebook.com/posts/kafka-concept">Kafka和zookeeper</a></p>
<p><a href="http://mysql.taobao.org/monthly/">数据库月报</a></p>
<p><a href="https://vonng.com/en/">PG 大牛 DB初创公司CEO</a></p>
<p><a href="https://blog.mrcroxx.com/posts/code-reading/leveldb-made-simple/4-memtable/#1-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8arena">Leveldb</a></p>
<p><a href="https://www.cnblogs.com/Newdawn/p/16816498.html">17年毕业的广工老哥-失去的东西不会回来，想想看你还剩下什么。 把手里的烂牌打好</a></p>
<p><a href="https://whoiami.github.io/">持续更新的数据库方向的博主</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>DDIA-note</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/14/category/ddia-note/</link>
      <pubDate>Thu, 14 Sep 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/14/category/ddia-note/</guid>
      <description>Reference DDIA chinese</description>
      <content:encoded><![CDATA[<h2 id="reference">Reference</h2>
<p><a href="http://ddia.vonng.com/#/">DDIA chinese</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>interview-golang</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/13/category/interview-golang/</link>
      <pubDate>Wed, 13 Sep 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/13/category/interview-golang/</guid>
      <description>golang问题 init的执行顺序 Golang中变量的分配位置是堆or栈可以看看这个和刘丹冰的 GC[典藏版]Golang三色标记、混合写屏障</description>
      <content:encoded><![CDATA[<h2 id="golang问题">golang问题</h2>
<ol>
<li>init的执行顺序</li>
<li>Golang中变量的分配位置是堆or栈<a href="https://eddycjy.gitbook.io/golang/di-1-ke-za-tan/stack-heap">可以看看这个</a>和<a href="https://studygolang.com/articles/27020">刘丹冰的</a></li>
<li>GC<a href="https://segmentfault.com/a/1190000022030353">[典藏版]Golang三色标记、混合写屏障GC模式图文全分析</a></li>
<li>扩容机制<a href="https://juejin.cn/post/7101928883280150558">Go 1.18 全新的切片扩容机制</a></li>
<li>Golang内存模型 <a href="https://cloud.tencent.com/developer/article/1422392">go内存管理</a> <a href="https://blog.wallenwang.com/2018/11/tcmalloc/#ftoc-heading-2">tcmalloc</a> <a href="https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-memory-allocator/">go语言设计和实现</a></li>
</ol>
<h3 id="参考">参考</h3>
<p><a href="https://zhuanlan.zhihu.com/p/471490292">go常见面试</a></p>
<p><a href="https://golang.design/go-questions/">Go 程序员面试笔试宝典</a></p>
<p><a href="https://eddycjy.gitbook.io/golang/di-1-ke-za-tan/stack-heap">跟着煎鱼学go</a></p>
<p><a href="https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-memory-allocator/">go语言设计与实现</a></p>
<h2 id="redis">redis</h2>
<h2 id="mysql">mysql</h2>
<h3 id="参考-1">参考</h3>
<p><a href="https://zhuanlan.zhihu.com/p/403656116">MySQL八股文连环45问（背诵版）</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>kafka-day1</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/13/category/kafka-day1/</link>
      <pubDate>Wed, 13 Sep 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/13/category/kafka-day1/</guid>
      <description>Kafka入门 基本概念 Apache Kafka 核心组件和流程 控制器 控制器也叫leader broker,负责分区leader的选取,也就是负责选举partitio</description>
      <content:encoded><![CDATA[<h2 id="kafka入门">Kafka入门</h2>
<h3 id="基本概念">基本概念</h3>
<p><img src="https://lianglianglee.com/%E4%B8%93%E6%A0%8F/Kafka%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/assets/58c35d3ab0921bf0476e3ba14069d291.jpg" alt=""></p>
<h3 id="apache-kafka-核心组件和流程">Apache Kafka 核心组件和流程</h3>
<h4 id="控制器">控制器</h4>
<p>控制器也叫leader broker,负责分区leader的选取,也就是负责选举partition的leader replica.</p>
<h5 id="控制器选举">控制器选举</h5>
<p>实际上就是借助Zookeeper分布式锁实现选主。</p>
<p>包括集群启动在内，有三种情况触发控制器选举：</p>
<ol>
<li>
<p>集群启动</p>
</li>
<li>
<p>控制器所在代理发生故障</p>
</li>
<li>
<p>zookeeper心跳感知，控制器与自己的session过期</p>
</li>
</ol>
<p><img src="https://i.typlog.com/codebook/8356635553_237707.jpg?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/resize,m_lfit,w_800/format,webp" alt=""></p>
<p>假设此集群有三个broker，同时启动。</p>
<p>（一）3个broker从zookeeper获取/controller临时节点信息。/controller存储的是选举出来的leader信息。此举是为了确认是否已经存在leader。</p>
<p>（二）如果还没有选举出leader，那么此节点是不存在的，返回-1。如果返回的不是-1，而是leader的json数据，那么说明已经有leader存在，选举结束。</p>
<p>（三）三个broker发现返回-1，了解到目前没有leader，于是均会触发向临时节点/controller写入自己的信息。最先写入的就会成为leader。</p>
<p>（四）假设broker 0的速度最快，他先写入了/controller节点，那么他就成为了leader。而broker1、broker2很不幸，因为晚了一步，他们在写/controller的过程中会抛出ZkNodeExistsException，也就是zk告诉他们，此节点已经存在了。</p>
<p>经过以上四步，broker 0成功写入/controller节点，其它broker写入失败了，所以broker 0成功当选leader。</p>
<h5 id="控制器初始化">控制器初始化</h5>
<p><img src="https://i.typlog.com/codebook/8356635524_366679.jpg?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/resize,m_lfit,w_1500/format,webp" alt=""></p>
<h3 id="reference">Reference</h3>
<p><a href="https://xie.infoq.cn/article/06024c2b556636be0e57fe1ed">一篇并不起眼的 Kafka 面试题</a>
<a href="https://blog.nowcoder.net/n/802b6a3bbcb2486b9c74dca048bd720b">Kafka面试，看这一篇就够了</a>
<a href="https://cloud.tencent.com/developer/article/1853417">《面试八股文》之 Kafka 21卷</a>
<a href="https://bbs.huaweicloud.com/blogs/302496">华为云kafka入门教学</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>redis_basic</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/13/category/redis_basic/</link>
      <pubDate>Wed, 13 Sep 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/13/category/redis_basic/</guid>
      <description>pipeline Redis Pipeline介绍及应用 事务 Redis 中的原子操作：事务与 Lua 脚本</description>
      <content:encoded><![CDATA[<h3 id="pipeline">pipeline</h3>
<p><a href="https://juejin.cn/post/6844904127001001991">Redis Pipeline介绍及应用</a></p>
<h3 id="事务">事务</h3>
<p><a href="https://blog.nicolasyang.me/posts/atomicity-in-redis-transaction-and-lua/">Redis 中的原子操作：事务与 Lua 脚本</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>高性能Mysql-ch1、2</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/12/category/high_perfermance_mysql_ch1_2/</link>
      <pubDate>Tue, 12 Sep 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/12/category/high_perfermance_mysql_ch1_2/</guid>
      <description>高性能Mysql 该系列主要是记录阅读高性能Mysql的一些笔记。 Mysql架构 架构的逻辑视图 连接管理和安全 每个客户端连接都会有一个线程，连接</description>
      <content:encoded><![CDATA[<h2 id="高性能mysql">高性能Mysql</h2>
<p>该系列主要是记录阅读高性能Mysql的一些笔记。</p>
<h3 id="mysql架构">Mysql架构</h3>
<h4 id="架构的逻辑视图">架构的逻辑视图</h4>
<p><img src="https://s2.loli.net/2023/09/12/sLkCIeyThaqAY3J.png" alt="如果无法打开请使用魔法"></p>
<h4 id="连接管理和安全">连接管理和安全</h4>
<p>每个客户端连接都会有一个线程，连接时会有身份验证，连接成功后还会验证用户是否具有执行每个查询的权限。</p>
<h4 id="优化和执行">优化和执行</h4>
<p>优化器不关心存储引擎的具体实现，但是存储引擎的确影响优化(Innodb和myisam在索引上的不同),优化器会向存储引擎查询他的一些功能和表的统计信息。</p>
<h4 id="锁的粒度">锁的粒度</h4>
<ol>
<li>表锁
锁定整张表</li>
<li>行锁
但是会有更多开销(跟踪拥有锁的用户，多久释放)</li>
</ol>
<h4 id="事务">事务</h4>
<p>主要就是ACID特性，这些在DB课上都学过，在此回顾一遍</p>
<ol>
<li>Atomicity</li>
</ol>
<p>原子性，事务内的语句不可分割，要么全执行，要么都不执行。</p>
<ol start="2">
<li>Consistency</li>
</ol>
<p>事务完成前后都处于一致性状态，e.g 钱的总数不变</p>
<ol start="3">
<li>Isolation</li>
</ol>
<p>一个事务在最终提交之前，其他的事务对其做出的修改不可见。</p>
<ol start="4">
<li>Durability</li>
</ol>
<p>事务提交后数据被持久化下来。</p>
<h4 id="隔离级别">隔离级别</h4>
<p>这也是很重要的概念</p>
<ol>
<li>
<p>(READ UNCOMMITTED)未提交读</p>
<p>A事务可以读B事务修改但未提交的数据(脏读)</p>
<ul>
<li>性能：没好很多</li>
<li>缺点：很多很多(主要是不一致)</li>
<li>几乎不使用</li>
</ul>
</li>
<li>
<p>(READ COMMITTED)提交读</p>
<p>大部分数据库系统使用这个隔离级别(但是Mysql不是),这会有个问题就是在A事务对某行的两次查询之间会有一个事务提交，导致不可重复读(两次读的结果不同)。</p>
</li>
<li>
<p>(REPEATABLE READ)可重复读</p>
<p>解决不可重复读问题，保证在同一个事务中多次读取相同行的结果是一样的。但是幻行(Phantom row)无法解决，也就在事务过程中会有新的记录被插入。</p>
</li>
<li>
<p>(SERIALIZABLE) 可串行化</p>
<p>每行数据都加锁(慢)</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读(幻行)</th>
<th>加锁读</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UNCOMMITTED</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>否</td>
<td>是</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>否</td>
<td>否</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>否</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
</tbody>
</table>
<h4 id="mvcc多版本并发控制">MVCC(多版本并发控制)</h4>
<p>推荐看</p>
<ol>
<li>Jeremy 大神的文章<a href="https://blog.jcole.us/2014/04/16/the-basics-of-the-innodb-undo-logging-and-history-system/">The basics of the InnoDB undo logging and history system</a></li>
<li>中文比较好的文章<a href="https://zhuanlan.zhihu.com/p/52977862">数据库基础（四）Innodb MVCC实现原理</a></li>
<li>这个也不错<a href="https://zhuanlan.zhihu.com/p/231947511">一文搞懂InnoDB MVCC机制</a></li>
</ol>
<p>总结一下：</p>
<ol>
<li>
<p><strong>Undo logging</strong> and <strong>InnoDB’s “history” system</strong> are the mechanisms that underly its implementation of MVCC, but the way this works is generally very poorly understood.</p>
</li>
<li></li>
</ol>
<h4 id="heading"></h4>
]]></content:encoded>
    </item>
    
    <item>
      <title>istio-day1</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/27/category/istio-day1/</link>
      <pubDate>Sun, 27 Aug 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/27/category/istio-day1/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>leetcode_record2</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/25/category/leetcode_record2/</link>
      <pubDate>Fri, 25 Aug 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/25/category/leetcode_record2/</guid>
      <description>力扣记录2 剑指 Offer 51. 数组中的逆序对 我对这题的评价是逆天 class Solution { public: int mergeSort(vector&amp;lt;int&amp;gt;&amp;amp; nums, vector&amp;lt;int&amp;gt;&amp;amp; tmp, int l, int r) { if (l &amp;gt;= r) { return 0; } int mid = (l + r) / 2; int inv_count = mergeSort(nums, tmp, l, mid) + mergeSort(nums, tmp, mid + 1, r);</description>
      <content:encoded><![CDATA[<h3 id="力扣记录2">力扣记录2</h3>
<h4 id="剑指-offer-51-数组中的逆序对httpsleetcodecnproblemsshu-zu-zhong-de-ni-xu-dui-lcofdescription"><a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/description/">剑指 Offer 51. 数组中的逆序对</a></h4>
<p>我对这题的评价是逆天</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">mergeSort</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">tmp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&gt;=</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">inv_count</span> <span class="o">=</span> <span class="n">mergeSort</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span> <span class="o">+</span> <span class="n">mergeSort</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">l</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">tmp</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">inv_count</span> <span class="o">+=</span> <span class="p">(</span><span class="n">j</span> <span class="o">-</span> <span class="p">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">tmp</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">++</span><span class="n">pos</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">tmp</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">inv_count</span> <span class="o">+=</span> <span class="p">(</span><span class="n">j</span> <span class="o">-</span> <span class="p">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">tmp</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">copy</span><span class="p">(</span><span class="n">tmp</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">l</span><span class="p">,</span> <span class="n">tmp</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">inv_count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="nf">reversePairs</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">tmp</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">mergeSort</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><ol>
<li>
<p>先讲讲这题，递归归并排序后，左右两个数组是有序，然后在并的时候统计左侧比右侧大的数量，如何统计呢：就是在左边的归并的时候统计这个时候右侧数组左边有多少已经被归并，这些就是比左侧这个小的。</p>
</li>
<li>
<p>其实这道题还可以学到归并排序的写法：</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">tmp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//递归结束条件，可以变成l-r小于一定值时用插入排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&gt;=</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 递归归并子数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">mergeSort</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mergeSort</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 合并两个有序数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">l</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">tmp</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="o">++</span><span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">tmp</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="o">++</span><span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">pos</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 统一对待剩下的左(右)数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">tmp</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">tmp</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将tmp数组的值复制到nums数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">copy</span><span class="p">(</span><span class="n">tmp</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">l</span><span class="p">,</span> <span class="n">tmp</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="剑指-offer-56---i-数组中数字出现的次数httpsleetcodecnproblemsshu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof"><a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/">剑指 Offer 56 - I. 数组中数字出现的次数</a></h3>
<p>先贴代码，感觉这种题就是见过就知道&hellip;&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">singleNumbers</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="nl">n</span> <span class="p">:</span> <span class="n">nums</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">ret</span> <span class="o">^=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">div</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">((</span><span class="n">div</span> <span class="o">&amp;</span> <span class="n">ret</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">div</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="nl">n</span> <span class="p">:</span> <span class="n">nums</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">div</span> <span class="o">&amp;</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">a</span> <span class="o">^=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">b</span> <span class="o">^=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>首先一个前置知识是：异或运算的性质：两个相同的数异或为0，一个数和0异或还是它本身。所以当只有一个数字只出现一次时，我们可以将所有的数异或，最后得到的结果就是那个只出现一次的数。</p>
<p>所以这题就是如何分组使得每组只有一个只出现一次的数，那么我们可以先将所有的数异或，得到的结果就是那两个只出现一次的数异或的结果，然后我们找到这个结果中第一个为1的位，因为这个位是两个数不同的位，所以我们可以根据这个位将所有的数分成两组，这样每组就只有一个只出现一次的数了。</p>
<h3 id="剑指-offer-58---i-翻转单词顺序httpsleetcodecnproblemsfan-zhuan-dan-ci-shun-xu-lcof"><a href="https://leetcode.cn/problems/fan-zhuan-dan-ci-shun-xu-lcof/">剑指 Offer 58 - I. 翻转单词顺序</a></h3>
<p>之前用go写发现挺简单，但是用c++写inplace的就有点难了。</p>
<p>方法我是知道的，先全翻转然后单词翻转，主要就是要注意多个空格怎么办，实际上还是用双指针的思想把空格或者说不用的挪到最后面去，然后erase掉就行了。</p>
<p>上代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">reverseWords</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">start</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">start</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//  cout&lt;&lt;s&lt;&lt;endl;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">start</span><span class="p">]</span><span class="o">!=</span><span class="sc">&#39; &#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="n">idx</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span> <span class="n">s</span><span class="p">[</span><span class="n">idx</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39; &#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span><span class="n">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span><span class="p">(</span><span class="n">end</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&amp;&amp;</span><span class="n">s</span><span class="p">[</span><span class="n">end</span><span class="p">]</span><span class="o">!=</span><span class="sc">&#39; &#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                    <span class="n">s</span><span class="p">[</span><span class="n">idx</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="n">end</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="n">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="n">idx</span><span class="o">-</span><span class="p">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="p">),</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="n">idx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// idx+=end-start;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;idx:&#34;</span><span class="o">&lt;&lt;</span><span class="n">idx</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">start</span><span class="o">=</span><span class="n">end</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">       
</span></span><span class="line"><span class="cl">        <span class="n">s</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="n">idx</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h3 id="岛屿数量httpsleetcodecnproblemsnumber-of-islandsdescription"><a href="https://leetcode.cn/problems/number-of-islands/description/">岛屿数量</a></h3>
<h3 id="数组第k大httpsleetcodecnproblemskth-largest-element-in-an-array"><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">数组第k大</a></h3>
<p>主要是要记住两个</p>
<ol>
<li>这题的最优解法：快速选择</li>
</ol>
<p>首先给出快排模板：</p>
<p>一个令人惊叹的事实是：这几乎是唯一的模板，他可以用来实现快排，快速选择等分治类型的问题。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">q</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&gt;=</span> <span class="n">r</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">do</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="k">while</span> <span class="p">(</span><span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">do</span> <span class="n">j</span><span class="o">--</span><span class="p">;</span> <span class="k">while</span> <span class="p">(</span><span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="n">swap</span><span class="p">(</span><span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">quick_sort</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">quick_sort</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>说回这道题：</p>
<p>在while 循环结束之后只能说begin到j是小于等于partition，j+1到end是大于等于partition，但是内部仍然不保证排序，所以要根据k和j的大小关系来决定下一步递归的范围。最后结束是begin==end的时候。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">findKthLargest</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nf">fastSelect</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="n">k</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="nf">fastSelect</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span><span class="kt">int</span> <span class="n">k</span><span class="p">,</span><span class="kt">int</span> <span class="n">begin</span><span class="p">,</span><span class="kt">int</span> <span class="n">end</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">begin</span><span class="o">==</span><span class="n">end</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">begin</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span><span class="n">end</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">partition</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">i</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">do</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;</span><span class="n">partition</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">do</span> <span class="n">j</span><span class="o">--</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">partition</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">          <span class="n">swap</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="o">&lt;=</span><span class="n">j</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">fastSelect</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">begin</span><span class="p">,</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">fastSelect</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">end</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><ol start="2">
<li>堆的实现，(c++ 泛型)</li>
</ol>
<p>学ds的时候学过，建堆有两种第一种是给定一个数组，然后一个一个插入，这样的时间复杂度是O(nlogn)，第二种是给定一个数组，然后从最后一个非叶子节点开始，从下往上调整，这样的时间复杂度是O(n)。</p>
<p>下面给出我的模板:</p>
<p>有几个要注意的点：</p>
<ol>
<li>两种初始化方式对应上面说的两个</li>
<li>percolate_up对应insert，parent节点的index计算方式：(i-1)/2（也是通过0，1，2）来记忆。</li>
<li>percolate_down对应delete_top，left和right节点的index计算方式：2<em>i+1,2</em>i+2（可以用0，1，2来记忆）。而且在建堆的时候是从最后一个非叶子节点开始的，所以这里的i是从heap_.size()/2开始的。也是一个重要结论。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">t</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Heap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">Heap</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;</span> <span class="n">h</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">:</span> <span class="n">func_</span><span class="p">(</span><span class="n">func</span><span class="p">),</span> <span class="n">heap_</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">h</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">heap_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">percolate_down</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">Heap</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">func</span><span class="p">)</span> <span class="o">:</span> <span class="n">func_</span><span class="p">(</span><span class="n">func</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">percolate_up</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">parent</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">func_</span><span class="p">(</span><span class="n">heap_</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">heap_</span><span class="p">[</span><span class="n">parent</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">heap_</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">heap_</span><span class="p">[</span><span class="n">parent</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="n">percolate_up</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="n">t</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">heap_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">percolate_up</span><span class="p">(</span><span class="n">heap_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="nf">size</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">heap_</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">percolate_down</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">smallest</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">heap_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">func_</span><span class="p">(</span><span class="n">heap_</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="n">heap_</span><span class="p">[</span><span class="n">smallest</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">smallest</span> <span class="o">=</span> <span class="n">left</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">right</span> <span class="o">&lt;</span> <span class="n">heap_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">func_</span><span class="p">(</span><span class="n">heap_</span><span class="p">[</span><span class="n">right</span><span class="p">],</span> <span class="n">heap_</span><span class="p">[</span><span class="n">smallest</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">smallest</span> <span class="o">=</span> <span class="n">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">smallest</span> <span class="o">!=</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">heap_</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">heap_</span><span class="p">[</span><span class="n">smallest</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="n">percolate_down</span><span class="p">(</span><span class="n">smallest</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">t</span> <span class="nf">delete_top</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span> <span class="n">top</span> <span class="o">=</span> <span class="n">heap_</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">heap_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">heap_</span><span class="p">[</span><span class="n">heap_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">heap_</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">percolate_down</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">top</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">t</span> <span class="nf">top</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">heap_</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">t</span><span class="o">&gt;</span> <span class="n">heap_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">func_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h3 id="处理溢出">处理溢出</h3>
<p>一般来说是乘法会出现溢出错误，所以可以用INT_MAX 来先除判断结果是否大于10，加法是不会产生异常的。</p>
<h3 id="2875-无限数组的最短子数组httpsleetcodecnproblemsminimum-size-subarray-in-infinite-arraydescription"><a href="https://leetcode.cn/problems/minimum-size-subarray-in-infinite-array/description/">2875. 无限数组的最短子数组</a></h3>
<blockquote>
<p>给你一个下标从 0 开始的数组 nums 和一个整数 target 。</p>
</blockquote>
<blockquote>
<p>下标从 0 开始的数组 infinite_nums 是通过无限地将 nums 的元素追加到自己之后生成的。</p>
</blockquote>
<blockquote>
<p>请你从 infinite_nums 中找出满足 元素和 等于 target 的 最短 子数组，并返回该子数组的长度。如果不存在满足条件的子数组，返回 -1 。</p>
</blockquote>
<p>这题我思路全对，但是还是被滑动窗口的细节困住了，选择了直接copy insert一段数组的做法。</p>
<p>先给出比较好的滑窗做法：</p>
<p>其实主要思路就是left，right正常从0到2*n，但是在计算sum要去num里面找数据的时候可以取模来找对应的数据。
这样是可以达到题目要求的。也可以作为环形数组滑动窗口的解法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">minSizeSubarray</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="kt">long</span> <span class="n">total</span> <span class="o">=</span> <span class="n">accumulate</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">0LL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="n">right</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">sum</span> <span class="o">+=</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span> <span class="o">%</span> <span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="p">(</span><span class="n">sum</span> <span class="o">&gt;</span> <span class="n">target</span> <span class="o">%</span> <span class="n">total</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">sum</span> <span class="o">-=</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="o">++</span> <span class="o">%</span> <span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">sum</span> <span class="o">==</span> <span class="n">target</span> <span class="o">%</span> <span class="n">total</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">ans</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span> <span class="o">==</span> <span class="n">INT_MAX</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="n">ans</span> <span class="o">+</span> <span class="n">target</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">作者：灵茶山艾府</span>
</span></span><span class="line"><span class="cl"><span class="err">链接：</span><span class="nl">https</span><span class="p">:</span><span class="c1">//leetcode.cn/problems/minimum-size-subarray-in-infinite-array/
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="err">来源：力扣（</span><span class="n">LeetCode</span><span class="err">）</span>
</span></span><span class="line"><span class="cl"><span class="err">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span>
</span></span></code></pre></div><p>没这么好的做法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">minSizeSubarray</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="kt">long</span> <span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">accumulate</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">0L</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">       <span class="kt">int</span> <span class="n">circle</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">target</span> <span class="o">/</span> <span class="n">sum</span> <span class="o">*</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">       <span class="n">target</span> <span class="o">%=</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">infinite_nums</span> <span class="o">=</span> <span class="n">nums</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="n">infinite_nums</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">infinite_nums</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">       <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">infinite_nums</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">minSize</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="k">for</span> <span class="p">(;</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">left</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">           <span class="k">while</span> <span class="p">(</span><span class="n">right</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">               <span class="n">sum</span> <span class="o">+=</span> <span class="n">infinite_nums</span><span class="p">[</span><span class="n">right</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">           <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="k">if</span> <span class="p">(</span><span class="n">sum</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">               <span class="n">minSize</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">minSize</span><span class="p">,</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">           <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           <span class="n">sum</span> <span class="o">-=</span> <span class="n">infinite_nums</span><span class="p">[</span><span class="n">left</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="n">minSize</span> <span class="o">==</span> <span class="n">INT_MAX</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="n">minSize</span> <span class="o">+</span> <span class="n">circle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>containerd-intro</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/23/category/containerd-intro/</link>
      <pubDate>Wed, 23 Aug 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/23/category/containerd-intro/</guid>
      <description>Reference 容器运行时 containerd 学习笔记</description>
      <content:encoded><![CDATA[<h2 id="reference">Reference</h2>
<p><a href="https://www.aneasystone.com/archives/2023/06/containerd-notes.html">容器运行时 containerd 学习笔记</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Go 语言高性能编程》阅读</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/19/category/go-%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB/</link>
      <pubDate>Sat, 19 Aug 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/19/category/go-%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB/</guid>
      <description>这个系列是记录阅读《Go 语言高性能编程》这本书的一些笔记 第一章：Go 语言性能分析 在学生时期，测试很难被重视起来，但是写好测试是程序员的进阶之</description>
      <content:encoded><![CDATA[<h3 id="这个系列是记录阅读go-语言高性能编程这本书的一些笔记">这个系列是记录阅读《Go 语言高性能编程》这本书的一些笔记</h3>
<h4 id="第一章go-语言性能分析">第一章：Go 语言性能分析</h4>
<p>在学生时期，测试很难被重视起来，但是写好测试是程序员的进阶之路，性能分析往往基于测试。</p>
<p>详见<a href=""></a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>gee-intro</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/19/category/gee-intro/</link>
      <pubDate>Sat, 19 Aug 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/19/category/gee-intro/</guid>
      <description>gee 本项目模仿极客兔兔的7天项目进行学习 gee-web 简介 这是一个简单的web框架，实现了路由、中间件、静态文件服务、模板渲染等功能。主要是模仿gin框架</description>
      <content:encoded><![CDATA[<h3 id="gee">gee</h3>
<p>本项目模仿极客兔兔的7天项目进行学习</p>
<h3 id="gee-web">gee-web</h3>
<h4 id="简介">简介</h4>
<p>这是一个简单的web框架，实现了路由、中间件、静态文件服务、模板渲染等功能。主要是模仿gin框架进行实现，下面就来说说从中学到的东西。</p>
<h5 id="context">context</h5>
<ol>
<li>
<p>每次请求都会创建一个context，所以在context中存储一些请求相关的信息是很有必要的，比如说请求的method、path、响应的writer等等，这些信息都是在请求过程中会用到的，所以在context中存储这些信息是很有必要的。</p>
</li>
<li>
<p>比如restful接口的构建，如果每次都要json然后encode会有很多重复代码。</p>
</li>
</ol>
<p>实现上</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Context</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// origin objects
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Req</span>    <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// request info
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Path</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Method</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// response info
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">StatusCode</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>基本就是把Writer req Path Method 等常用属性封装，然后提供一些常用的方法，比如说PostForm、Query、Status、SetHeader、String、JSON等等。</p>
<h5 id="router">router</h5>
<p>基于前缀树实现，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">router</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">roots</span>    <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handlers</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">HandlerFunc</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">node</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pattern</span>  <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">part</span>     <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">children</span> <span class="p">[]</span><span class="o">*</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl">	<span class="nx">isWild</span>   <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>注意每个方法(GET POST)都有对应Node 根节点，然后看node的结构，包含pattern part children isWild，pattern是完整的路径，part是当前节点的路径，children是子节点，isWild表示是否精确匹配。</p>
<p>搜索时通过Path找到节点，然后根据patten来找到对应handler。</p>
<h5 id="group">group</h5>
<p>分组这个功能还是很有用的</p>
<ol>
<li>提供了逻辑上的隔离，使得每个分组中的路由都有相同的前缀，这样就可以提取公共的前缀，减少冗余代码。</li>
<li>中间件可以基于组来设置，这样就可以对某个组的路由设置中间件，而不是每个路由都设置中间件。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">RouterGroup</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">prefix</span>      <span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="nx">middlewares</span> <span class="p">[]</span><span class="nx">HandlerFunc</span> <span class="c1">// support middleware
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">parent</span>      <span class="o">*</span><span class="nx">RouterGroup</span>  <span class="c1">// support nesting
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">engine</span>      <span class="o">*</span><span class="nx">Engine</span>       <span class="c1">// all groups share a Engine instance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">Engine</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="o">*</span><span class="nx">RouterGroup</span>
</span></span><span class="line"><span class="cl">		<span class="nx">router</span> <span class="o">*</span><span class="nx">router</span>
</span></span><span class="line"><span class="cl">		<span class="nx">groups</span> <span class="p">[]</span><span class="o">*</span><span class="nx">RouterGroup</span> <span class="c1">// store all groups
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span></code></pre></div><p>实现就有点意思了，每个分组为了保持对engine的可见性(可能表述有问题),需要有一个engine的引用这样添加路由时才能添加到engine中，所以每个分组都有一个engine的引用，然后engine中有一个groups的属性，用来存储所有的分组，这样就可以通过engine来访问所有的分组了。</p>
<h5 id="middleware">middleware</h5>
<p>中间件的设计也很精巧</p>
<p>它是基于这样一种情景:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">A</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">part1</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">part2</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">B</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">part3</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">part4</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>所以context需要添加一个index属性，用来记录当前执行到哪个中间件了，然后在Next方法中，先把index加1，然后执行中间件，然后再执行Next方法，这样就可以实现中间件的执行了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Context</span><span class="p">)</span> <span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">index</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">index</span> <span class="p">&lt;</span> <span class="nx">s</span><span class="p">;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">index</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">handlers</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">index</span><span class="p">](</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这个next设计很有意思，这个是从当前中间件的下一个进行遍历操作，而不是只执行下一个。这是因为有些中间件的操作是不调用next的，比如说logger中间件，它只是打印日志，然后就不需要执行下一个中间件了，所以这样设计是很合理的。然后与之配套的Context.Fail方法，用来中断中间件的执行也很有意思。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Context</span><span class="p">)</span> <span class="nf">Fail</span><span class="p">(</span><span class="nx">code</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">index</span> <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">handlers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">code</span><span class="p">,</span> <span class="nx">H</span><span class="p">{</span><span class="s">&#34;message&#34;</span><span class="p">:</span> <span class="nx">err</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>他这里会把index直接设置为最后，那么堆栈中嵌套调用的next都会立刻退出而不会继续执行下去。</p>
<p>差点漏说了，这个URL本身的Handler也被当成一个中间件放在最后，这样代码连贯性比较好。servehttp的时候就是调用next就开始执行了。</p>
<h5 id="panic-recover">panic-recover</h5>
<p>这个也是http框架必不可少的，因为http框架是一个长期运行的服务，所以必须要有panic-recover机制，不然一旦出现panic，整个服务就会挂掉，这是不允许的。</p>
<p>这gee(gin)中这是通过设置recover中间件来实现的也是一种很不错的方法。</p>
<h3 id="gee-cache">gee-cache</h3>
<h4 id="day1-lru">Day1 LRU</h4>
<p>基本上是用Map和list.List来实现LRU，要注意的是链表里面不止存value，还要存key因为这样删除的时候才可以O(1)删除map</p>
<h4 id="day2">Day2</h4>
<ol>
<li>byteview: 一个只读的数据结构，实现了查询长度和拷贝的功能。</li>
<li>回调 Getter，这一部分是为了实现缓存中找不到去更深层的数据源查找的功能。</li>
</ol>
<p>有意思的是这里用了一个Getter接口，然后用GetterFunc来实现这个接口，这样就可以用函数来实现这个接口了，这样就可以不用每次都实现一个结构体了(当然实现结构体也可以)。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// A Getter loads data for a key.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Getter</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// A GetterFunc implements Getter with a function.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">GetterFunc</span> <span class="kd">func</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Get implements Getter interface function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="nx">GetterFunc</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">f</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="3">
<li>Group</li>
</ol>
<p>group可以看成是命名空间，每个group有一个名字，然后每个group有一个cache，然后每个group有一个getter，这样就可以实现不同的group有不同的cache和getter了。</p>
<h4 id="day3-http-服务端">Day3 HTTP 服务端</h4>
<p>其实比较简单，就是写了一个HTTPPool的结构体，实现ServeHttp方法。要注意现在的HTTPPool是一个单机的，所以只能用来做单机的缓存。</p>
<h4 id="一致性哈希">一致性哈希</h4>
<p><img src="https://geektutu.com/post/geecache-day4/add_peer.jpg" alt=""></p>
<p>避免数据倾斜，一个真实节点可能对应多个缓存节点。</p>
<h4 id="实现">实现</h4>
<p>首先就是节点的添加，主要就是用一个数组有序存放各个虚拟节点hash值，再用一个hashmap存虚拟节点和真实节点的对应关系。
在根据key获取节点的时候就把key的hash值用来二分查找，然后找到第一个大于等于key的hash值，然后就可以找到对应的节点了。</p>
<h4 id="分布式节点">分布式节点</h4>
<ol>
<li>定义接口</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// PeerPicker is the interface that must be implemented to locate
</span></span></span><span class="line"><span class="cl"><span class="c1">// the peer that owns a specific key.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">PeerPicker</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">PickPeer</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">peer</span> <span class="nx">PeerGetter</span><span class="p">,</span> <span class="nx">ok</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// PeerGetter is the interface that must be implemented by a peer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">PeerGetter</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Get</span><span class="p">(</span><span class="nx">group</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ol start="2">
<li>由httppool实现peerPicker接口，利用其内部的一致性哈希模块选择真实节点。</li>
<li>httpgetter实现peergetter接口，利用http客户端从远程节点获取缓存值(其实就是封装了http请求)。</li>
<li>集成httppool到group中，就是修改一下load方法使其先pick再get。</li>
</ol>
<h4 id="day6">day6</h4>
<p>防止缓存击穿：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">singleflight</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">call</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span>  <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">	<span class="nx">val</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Group</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mu</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>       <span class="c1">// protects m
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">m</span>  <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">call</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li>call 代表正在进行中，或已经结束的请求。使用 sync.WaitGroup 锁避免重入。</li>
<li>Group 是 singleflight 的主数据结构，管理不同 key 的请求(call)。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">g</span> <span class="o">*</span><span class="nx">Group</span><span class="p">)</span> <span class="nf">Do</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">fn</span> <span class="kd">func</span><span class="p">()</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">))</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">g</span><span class="p">.</span><span class="nx">m</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">g</span><span class="p">.</span><span class="nx">m</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">call</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">g</span><span class="p">.</span><span class="nx">m</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">g</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="c1">//提前返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">val</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">call</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">m</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">=</span> <span class="nx">c</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//唯一一次调用fn
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nx">val</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">err</span> <span class="p">=</span> <span class="nf">fn</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nb">delete</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">m</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">val</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>golang test</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/19/category/golang-test/</link>
      <pubDate>Sat, 19 Aug 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/19/category/golang-test/</guid>
      <description>标准库 testing 标准测试使用go test 来编译运行测试*_test.go文件，这些文件不是go build命令编译的对象。 *_test.go 中，有三种测试 功能测试 每一个测试</description>
      <content:encoded><![CDATA[<h2 id="标准库">标准库</h2>
<p>testing</p>
<p>标准测试使用go test 来编译运行测试*_test.go文件，这些文件不是go build命令编译的对象。</p>
<p>*_test.go 中，有三种测试</p>
<ol>
<li>
<p>功能测试</p>
<p>每一个测试文件必须导入testing包，并且函数的签名为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//以Test开头，后面的名称首字母大写
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">TestName</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>基准测试</p>
<p>函数签名为</p>
<p>调用时: <code>go test -bench</code></p>
</li>
<li>
<p>示例函数</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
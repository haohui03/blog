<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yehh</title>
    <link>https://blog.yehaohui.com/zh-cn/</link>
    <description>Recent content on Yehh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 15 Feb 2023 13:01:23 +0800</lastBuildDate>
    
    <atom:link href="https://blog.yehaohui.com/zh-cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://blog.yehaohui.com/zh-cn/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/about/</guid>
      <description>Hi! 我是叶浩辉 华南理工大学 软件学院二年级本科生, 兴趣集中在Computer Vision 和 Trustworthy Machine Learning。 希望不断学习，不断进步，通过深度阅读提升思</description>
      <content:encoded><![CDATA[<h2 id="hi-我是叶浩辉httpsblogyehaohuicom">Hi! 我是<a href="https://blog.yehaohui.com/">叶浩辉</a></h2>
<p><a href="https://www.scut.edu.cn/new/">华南理工大学</a> 软件学院二年级本科生, 兴趣集中在Computer Vision 和 Trustworthy Machine Learning。</p>
<p>希望不断学习，不断进步，通过深度阅读提升思考能力。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>字符串</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/02/15/leetcode_day5/</link>
      <pubDate>Wed, 15 Feb 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/02/15/leetcode_day5/</guid>
      <description>字符串</description>
      <content:encoded><![CDATA[<h2 id="字符串">字符串</h2>
]]></content:encoded>
    </item>
    
    <item>
      <title>哈希表</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/02/12/leetcode_day3/</link>
      <pubDate>Sun, 12 Feb 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/02/12/leetcode_day3/</guid>
      <description>哈希表 哈希碰撞的两个解决方法: 拉链法 线性探测 常见的哈希表: 数组 set map 有关红黑树，见红黑树深入剖析及Java实现 RBTree的定义 RBTree的</description>
      <content:encoded><![CDATA[<h2 id="哈希表">哈希表</h2>
<p>哈希碰撞的两个解决方法:</p>
<ol>
<li>拉链法
<img src="https://img-blog.csdnimg.cn/20210104235015226.png" alt=""></li>
<li>线性探测
<img src="https://img-blog.csdnimg.cn/20210104235109950.png" alt=""></li>
</ol>
<p>常见的哈希表:</p>
<ol>
<li>
<p>数组</p>
</li>
<li>
<p>set</p>
</li>
</ol>
<p><img src="https://s2.loli.net/2023/02/12/y6YRtcNObwFrE3j.jpg" alt="23-02-12-set.JPG"></p>
<ol start="3">
<li>map
<img src="https://s2.loli.net/2023/02/13/LYFdkshWVyco84P.png" alt="xiaz.png"></li>
</ol>
<p>有关红黑树，见<a href="https://tech.meituan.com/2016/12/02/redblack-tree.html">红黑树深入剖析及Java实现</a></p>
<p>RBTree的定义
RBTree的定义如下:</p>
<ul>
<li>任何一个节点都有颜色，黑色或者红色。</li>
<li>根节点是黑色的。</li>
<li>父子节点之间不能出现两个连续的红节点。</li>
<li>任何一个节点向下遍历到其子孙的叶子节点，所经过的黑节点个数必须相等。</li>
<li>空节点被认为是黑色的。</li>
</ul>
<p><a href="https://juejin.cn/post/6972535873971847204">golang 字典的底层</a></p>
<h3 id="例题">例题</h3>
<h4 id="leetcode-242-easyhttpsleetcodecnproblemsvalid-anagramsubmissions"><a href="https://leetcode.cn/problems/valid-anagram/submissions/">leetcode 242 easy</a></h4>
<blockquote>
<p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p>
</blockquote>
<blockquote>
<p>注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。
my version</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">isAnagram</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">t</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sMap</span><span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">rune</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">tMap</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">rune</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">i</span><span class="o">:=</span><span class="k">range</span><span class="p">(</span><span class="nx">s</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nx">sMap</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">i</span><span class="o">:=</span><span class="k">range</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nx">tMap</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">sMap</span><span class="p">)</span><span class="o">!=</span><span class="nb">len</span><span class="p">(</span><span class="nx">tMap</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">k</span><span class="p">,</span><span class="nx">v</span><span class="o">:=</span><span class="k">range</span><span class="p">(</span><span class="nx">sMap</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">v</span><span class="o">==</span><span class="nx">tMap</span><span class="p">[</span><span class="nx">k</span><span class="p">]{</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>better version</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">isAnagram</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">t</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">record</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">26</span><span class="p">]</span><span class="kt">int</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">record</span><span class="p">[</span><span class="nx">r</span><span class="o">-</span><span class="nb">rune</span><span class="p">(</span><span class="sc">&#39;a&#39;</span><span class="p">)]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">t</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">record</span><span class="p">[</span><span class="nx">r</span><span class="o">-</span><span class="nb">rune</span><span class="p">(</span><span class="sc">&#39;a&#39;</span><span class="p">)]</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">record</span> <span class="o">==</span> <span class="p">[</span><span class="mi">26</span><span class="p">]</span><span class="kt">int</span><span class="p">{}</span>   <span class="c1">// record数组如果有的元素不为零0，说明字符串s和t 一定是谁多了字符或者谁少了字符。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>把数组看出hash map，同时只用一个hash表就完成比较，最后的判断比较零也很巧妙(因为数组的每个元素都是可以比较的所以可以直接用等于。)</p>
<p>相关题目:</p>
<ul>
<li>383.赎金信</li>
<li>49.字母异位词分组</li>
<li>438.找到字符串中所有字母异位词</li>
</ul>
<h4 id="383-赎金信httpsleetcodecnproblemsransom-note"><a href="https://leetcode.cn/problems/ransom-note/">383 赎金信.</a></h4>
<p>也是需要优化，不能直接用map(要维护一个哈希表或者红黑树),面对这种单词的出现的哈希，要注意用26字母的数组来代替。</p>
<blockquote>
<p>给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。</p>
</blockquote>
<blockquote>
<p>如果可以，返回 true ；否则返回 false 。</p>
</blockquote>
<blockquote>
<p>magazine 中的每个字符只能在 ransomNote 中使用一次。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">canConstruct</span><span class="p">(</span><span class="nx">ransomNote</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">magazine</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">record</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">26</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">magazine</span> <span class="p">{</span>   <span class="c1">// 通过recode数据记录 magazine里各个字符出现次数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">record</span><span class="p">[</span><span class="nx">v</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">ransomNote</span> <span class="p">{</span> <span class="c1">// 遍历ransomNote，在record里对应的字符个数做--操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">record</span><span class="p">[</span><span class="nx">v</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">record</span><span class="p">[</span><span class="nx">v</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>     <span class="c1">// 如果小于零说明ransomNote里出现的字符，magazine没有
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>从优秀的解法中可以学到:</p>
<ul>
<li>利用固定数组代替map(set)</li>
<li>首先把有的用数组记录下来, 然后遍历需要的然后一个个减，这样的话小于零就是不满足。我的是反过来，这样的话要记录目标==0，然后记录次数与length相比。这样是比较麻烦的。</li>
</ul>
<h4 id="leetcode-49字母异位词分组httpsleetcodecnproblemsgroup-anagrams"><a href="https://leetcode.cn/problems/group-anagrams/">leetcode 49.字母异位词分组</a></h4>
<blockquote>
<p>给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。</p>
</blockquote>
<blockquote>
<p>字母异位词 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。</p>
</blockquote>
<p>这题也是有点难</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">groupAnagrams</span><span class="p">(</span><span class="nx">strs</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">record</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[[</span><span class="mi">26</span><span class="p">]</span><span class="kt">int</span><span class="p">][]</span><span class="kt">string</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">v</span><span class="o">:=</span><span class="k">range</span><span class="p">(</span><span class="nx">strs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nx">cnt</span><span class="o">:=</span> <span class="p">[</span><span class="mi">26</span><span class="p">]</span><span class="kt">int</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">i</span><span class="o">:=</span><span class="k">range</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="nx">cnt</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">record</span><span class="p">[</span><span class="nx">cnt</span><span class="p">]=</span><span class="nb">append</span><span class="p">(</span><span class="nx">record</span><span class="p">[</span><span class="nx">cnt</span><span class="p">],</span><span class="nx">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ans</span><span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">string</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="nx">record</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">v</span> <span class="o">:=</span><span class="k">range</span><span class="p">(</span><span class="nx">record</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nx">ans</span><span class="p">=</span><span class="nb">append</span><span class="p">(</span><span class="nx">ans</span><span class="p">,</span><span class="nx">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">ans</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>总结:</p>
<ul>
<li>这个哈希我其实有想到，但是对于key和value的数据结构还是不是很了解，key: [26]int value []string, 所以没有写出来</li>
</ul>
<h4 id="leetcode-438-找到字符串中所有字母异位词httpsleetcodecnproblemsfind-all-anagrams-in-a-string"><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">leetcode 438. 找到字符串中所有字母异位词</a></h4>
<blockquote>
<p>给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p>
</blockquote>
<blockquote>
<p>异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">findAnagrams</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">p</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ans</span><span class="o">:=</span><span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">target</span><span class="o">:=</span> <span class="p">[</span><span class="mi">26</span><span class="p">]</span><span class="kt">int</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">v</span><span class="o">:=</span><span class="k">range</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nx">target</span><span class="p">[</span><span class="nx">v</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">source</span><span class="o">:=</span> <span class="p">[</span><span class="mi">26</span><span class="p">]</span><span class="kt">int</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">left</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">right</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">right</span><span class="o">!=</span><span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">source</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">right</span><span class="o">-</span><span class="nx">left</span><span class="o">+</span><span class="mi">1</span><span class="o">==</span><span class="nb">len</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">right</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">source</span><span class="o">==</span><span class="nx">target</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">ans</span><span class="p">=</span><span class="nb">append</span><span class="p">(</span><span class="nx">ans</span><span class="p">,</span><span class="nx">left</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">right</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">right</span><span class="p">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="nx">source</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">                <span class="nx">source</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">left</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="p">]</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">                <span class="nx">left</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="nx">ans</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">ans</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>总结:</p>
<ul>
<li>第一次错误: 写了一步特殊的 source[s[left]-&lsquo;a&rsquo;]这样不具有普遍性,应该把添加节点的操作放进for 用right来加入。</li>
<li>第二次错误: 在第一个for 的if 里面处理第二个for，没有考虑第一个<em>for</em>退出的时候也需要处理第二个for，正确的做法是：第一个<em>for</em>+在第二个<em>for</em>中统一考虑第一个for结束的两种情况。</li>
</ul>
<h4 id="leetcode-15-三数之和httpsleetcodecnproblems3sum"><a href="https://leetcode.cn/problems/3sum/">leetcode 15. 三数之和</a></h4>
<blockquote>
<p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请</p>
</blockquote>
<blockquote>
<p>你返回所有和为 0 且不重复的三元组。</p>
</blockquote>
<blockquote>
<p>注意：答案中不可以包含重复的三元组。</p>
</blockquote>
<ul>
<li>确实很难，如果用2sum的哈希表方法去重逻辑非常复杂，就是不会去重。</li>
<li>注意到是可以排序的，不管用什么方法都要排序。可见在去重中，排序的很重要的手段。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">threeSum</span><span class="p">(</span><span class="nx">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sort</span><span class="p">.</span><span class="nf">Ints</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ans</span><span class="o">:=</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="p">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">i</span><span class="p">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">==</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]{</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">j</span><span class="o">:=</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="nx">k</span><span class="o">:=</span><span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">k</span><span class="p">&gt;</span><span class="nx">j</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">+</span><span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">+</span><span class="nx">nums</span><span class="p">[</span><span class="nx">k</span><span class="p">]&gt;</span><span class="mi">0</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">k</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">                <span class="k">continue</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">+</span><span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">+</span><span class="nx">nums</span><span class="p">[</span><span class="nx">k</span><span class="p">]&lt;</span><span class="mi">0</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">j</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">                    <span class="k">continue</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">ans</span><span class="p">=</span><span class="nb">append</span><span class="p">(</span><span class="nx">ans</span><span class="p">,[]</span><span class="kt">int</span><span class="p">{</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">nums</span><span class="p">[</span><span class="nx">k</span><span class="p">]})</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">j</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="nx">k</span><span class="p">&gt;</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">==</span><span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]{</span>
</span></span><span class="line"><span class="cl">                            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="k">break</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">k</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="nx">k</span><span class="p">&gt;</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">nums</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span><span class="o">==</span><span class="nx">nums</span><span class="p">[</span><span class="nx">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]{</span>
</span></span><span class="line"><span class="cl">                            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="k">break</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">ans</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>四数之和就是建立在三数之和的基础上的了。
还要注意的是，开头可以剪枝，就是排序之后判断第一个。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>链表(下)</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/02/09/leetcode_day3/</link>
      <pubDate>Thu, 09 Feb 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/02/09/leetcode_day3/</guid>
      <description>链表(下) leetcode 206. 简单一遍过 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func reverseList(head *ListNode) *ListNode { if head==nil || head.Next==nil{ return</description>
      <content:encoded><![CDATA[<h2 id="链表下">链表(下)</h2>
<p>leetcode 206. 简单一遍过</p>
<blockquote>
<p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Definition for singly-linked list.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * type ListNode struct {
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     Val int
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     Next *ListNode
</span></span></span><span class="line"><span class="cl"><span class="cm"> * }
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">reverseList</span><span class="p">(</span><span class="nx">head</span> <span class="o">*</span><span class="nx">ListNode</span><span class="p">)</span> <span class="o">*</span><span class="nx">ListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">head</span><span class="o">==</span><span class="kc">nil</span> <span class="o">||</span> <span class="nx">head</span><span class="p">.</span><span class="nx">Next</span><span class="o">==</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">head</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">first</span> <span class="o">*</span><span class="nx">ListNode</span>
</span></span><span class="line"><span class="cl">    <span class="nx">second</span> <span class="o">:=</span> <span class="nx">head</span>
</span></span><span class="line"><span class="cl">    <span class="nx">third</span> <span class="o">:=</span> <span class="nx">second</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">third</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">second</span><span class="p">.</span><span class="nx">Next</span><span class="p">=</span><span class="nx">first</span>
</span></span><span class="line"><span class="cl">        <span class="nx">first</span><span class="p">=</span><span class="nx">second</span>
</span></span><span class="line"><span class="cl">        <span class="nx">second</span><span class="p">=</span><span class="nx">third</span>
</span></span><span class="line"><span class="cl">        <span class="nx">third</span><span class="p">=</span><span class="nx">second</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">second</span><span class="p">.</span><span class="nx">Next</span><span class="p">=</span><span class="nx">first</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">second</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">leetcode 24</a></p>
<blockquote>
<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Definition for singly-linked list.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * type ListNode struct {
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     Val int
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     Next *ListNode
</span></span></span><span class="line"><span class="cl"><span class="cm"> * }
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">swapPairs</span><span class="p">(</span><span class="nx">head</span> <span class="o">*</span><span class="nx">ListNode</span><span class="p">)</span> <span class="o">*</span><span class="nx">ListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dommy</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">ListNode</span><span class="p">{</span><span class="nx">Val</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">Next</span><span class="p">:</span><span class="nx">head</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">first</span><span class="o">:=</span> <span class="nx">dommy</span>
</span></span><span class="line"><span class="cl">    <span class="nx">second</span> <span class="o">:=</span> <span class="nx">head</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">second</span><span class="o">!=</span><span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">second</span><span class="p">.</span><span class="nx">Next</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">first</span><span class="p">.</span><span class="nx">Next</span><span class="p">=</span><span class="nx">second</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">        <span class="nx">second</span><span class="p">.</span><span class="nx">Next</span><span class="p">=</span><span class="nx">first</span><span class="p">.</span><span class="nx">Next</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">        <span class="nx">first</span><span class="p">.</span><span class="nx">Next</span><span class="p">.</span><span class="nx">Next</span><span class="p">=</span><span class="nx">second</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">first</span><span class="p">=</span><span class="nx">second</span>
</span></span><span class="line"><span class="cl">        <span class="nx">second</span><span class="p">=</span><span class="nx">second</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">dommy</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>不算难，用虚拟头节点模拟就行。</p>
<p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">leetcode 19.</a></p>
<blockquote>
<p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Definition for singly-linked list.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * type ListNode struct {
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     Val int
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     Next *ListNode
</span></span></span><span class="line"><span class="cl"><span class="cm"> * }
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">removeNthFromEnd</span><span class="p">(</span><span class="nx">head</span> <span class="o">*</span><span class="nx">ListNode</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">ListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nx">nodeB</span><span class="o">:=</span><span class="nx">head</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dommy</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">ListNode</span><span class="p">{</span><span class="nx">Val</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">Next</span><span class="p">:</span><span class="nx">head</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nodeA</span><span class="o">:=</span><span class="nx">dommy</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="p">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">nodeB</span><span class="p">=</span><span class="nx">nodeB</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">nodeB</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">nodeB</span><span class="p">=</span><span class="nx">nodeB</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">        <span class="nx">nodeA</span><span class="p">=</span><span class="nx">nodeA</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nodeA</span><span class="p">.</span><span class="nx">Next</span><span class="p">=</span><span class="nx">nodeA</span><span class="p">.</span><span class="nx">Next</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">dommy</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">leetcode 面试题 02.07</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Definition for singly-linked list.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * type ListNode struct {
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     Val int
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     Next *ListNode
</span></span></span><span class="line"><span class="cl"><span class="cm"> * }
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getIntersectionNode</span><span class="p">(</span><span class="nx">headA</span><span class="p">,</span> <span class="nx">headB</span> <span class="o">*</span><span class="nx">ListNode</span><span class="p">)</span> <span class="o">*</span><span class="nx">ListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">headA</span><span class="o">==</span><span class="kc">nil</span> <span class="o">||</span> <span class="nx">headB</span> <span class="o">==</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">pa</span> <span class="p">,</span><span class="nx">pb</span><span class="o">:=</span> <span class="nx">headA</span><span class="p">,</span><span class="nx">headB</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">pa</span><span class="o">!=</span><span class="nx">pb</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">pa</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">pa</span><span class="p">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">pa</span> <span class="p">=</span> <span class="nx">headB</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">pb</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">pb</span><span class="p">=</span><span class="nx">pb</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">pb</span> <span class="p">=</span> <span class="nx">headA</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">pa</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>本来的想法也是，双指针一起移动，但是两个的长度不一样，可能移动的过程中并不能相遇到一起，但是利用等差数列求和的思想，补齐就可以。详情见<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/solution/lian-biao-xiang-jiao-by-leetcode-solutio-2kne/">题解</a></p>
<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">leetcode 142. 环形链表 II</a></p>
<p><em>Crazy 的一题</em></p>
<blockquote>
<p>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Definition for singly-linked list.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * type ListNode struct {
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     Val int
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     Next *ListNode
</span></span></span><span class="line"><span class="cl"><span class="cm"> * }
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">detectCycle</span><span class="p">(</span><span class="nx">head</span> <span class="o">*</span><span class="nx">ListNode</span><span class="p">)</span> <span class="o">*</span><span class="nx">ListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">slow</span><span class="p">,</span> <span class="nx">fast</span> <span class="o">:=</span> <span class="nx">head</span><span class="p">,</span><span class="nx">head</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="p">&lt;</span><span class="mi">2</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">fast</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fast</span><span class="p">=</span><span class="nx">fast</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">slow</span><span class="p">=</span> <span class="nx">slow</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">slow</span><span class="o">==</span><span class="nx">fast</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">cur</span><span class="o">:=</span> <span class="nx">head</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">cur</span><span class="o">!=</span><span class="nx">slow</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">cur</span><span class="p">=</span><span class="nx">cur</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">        <span class="nx">slow</span><span class="p">=</span><span class="nx">slow</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">cur</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>建议直接看<a href="https://leetcode.cn/problems/linked-list-cycle-ii/solution/linked-list-cycle-ii-kuai-man-zhi-zhen-shuang-zhi-/">神级题解</a></p>
<p>看完题解之后的感受是:</p>
<ul>
<li>这类链表题目一般都是使用双指针法解决的，例如寻找距离尾部第 K 个节点、寻找环入口、寻找公共尾部入口等。</li>
<li>要对数量关系进行建模理解</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>模拟，链表(上)</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/02/07/leetcode_day2/</link>
      <pubDate>Tue, 07 Feb 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/02/07/leetcode_day2/</guid>
      <description>模拟，链表(上) 模拟 以leetcode 59.螺旋矩阵为例: 相信很多同学刚开始做这种题目的时候，上来就是一波判断猛如虎。 结果运行的时候各种问题</description>
      <content:encoded><![CDATA[<h2 id="模拟链表上">模拟，链表(上)</h2>
<h3 id="模拟">模拟</h3>
<p>以leetcode 59.螺旋矩阵为例:</p>
<blockquote>
<p>相信很多同学刚开始做这种题目的时候，上来就是一波判断猛如虎。</p>
</blockquote>
<blockquote>
<p>结果运行的时候各种问题，然后开始各种修修补补，最后发现改了这里那里有问题，改了那里这里又跑不起来了。</p>
</blockquote>
<p>说的就是我了(捂脸)</p>
<p>题目：</p>
<blockquote>
<p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p>
</blockquote>
<p>我的answer</p>
<p>值得注意的是二维切片的创建与初始化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//golang
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">generateMatrix</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">number</span><span class="o">:=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nx">out</span><span class="o">:=</span><span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="k">range</span><span class="p">(</span><span class="nx">out</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nx">out</span><span class="p">[</span><span class="nx">i</span><span class="p">]=</span><span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">terms</span><span class="o">:=</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">t</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="p">&lt;</span><span class="nx">terms</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="nx">t</span><span class="p">;</span><span class="nx">i</span><span class="p">&lt;</span><span class="nx">n</span><span class="o">-</span><span class="nx">t</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">           <span class="nx">out</span><span class="p">[</span><span class="nx">t</span><span class="p">][</span><span class="nx">i</span><span class="p">]=</span><span class="nx">number</span>
</span></span><span class="line"><span class="cl">           <span class="nx">number</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">           
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">j</span><span class="o">:=</span><span class="nx">t</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">&lt;</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">t</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">out</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">t</span><span class="p">]=</span><span class="nx">number</span>
</span></span><span class="line"><span class="cl">            <span class="nx">number</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="nx">n</span><span class="o">-</span><span class="nx">t</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">i</span><span class="o">&gt;=</span><span class="nx">t</span><span class="p">;</span><span class="nx">i</span><span class="o">--</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">number</span><span class="o">==</span><span class="nx">n</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">out</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">t</span><span class="p">][</span><span class="nx">i</span><span class="p">]=</span><span class="nx">number</span>
</span></span><span class="line"><span class="cl">            <span class="nx">number</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">           
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">j</span><span class="o">:=</span><span class="nx">n</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="nx">t</span><span class="p">;</span><span class="nx">j</span><span class="o">&gt;=</span><span class="nx">t</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="o">--</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">out</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">t</span><span class="p">]=</span><span class="nx">number</span>
</span></span><span class="line"><span class="cl">            <span class="nx">number</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">out</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>和我的思路一样但是更清晰的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">generateMatrix</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">res</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span> <span class="c1">// 使用vector定义一个二维数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">startx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">starty</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 定义每循环一个圈的起始位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">loop</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 每个圈循环几次，例如n为奇数3，那么loop = 1 只是循环一圈，矩阵中间的值需要单独处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 矩阵中间的位置，例如：n为3， 中间的位置就是(1，1)，n为5，中间位置为(2, 2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 用来给矩阵中每一个空格赋值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 需要控制每一条边遍历的长度，每次循环右边界收缩一位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">loop</span> <span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">=</span> <span class="n">startx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">starty</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 下面开始的四个for就是模拟转了一圈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 模拟填充上行从左到右(左闭右开)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">starty</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">offset</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">res</span><span class="p">[</span><span class="n">startx</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 模拟填充右列从上到下(左闭右开)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">startx</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">offset</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 模拟填充下行从右到左(左闭右开)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="p">(;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="n">starty</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 模拟填充左列从下到上(左闭右开)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">startx</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">startx</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">starty</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// offset 控制每一圈里每一条边遍历的长度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">offset</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果n为奇数的话，需要单独给矩阵最中间的位置赋值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">res</span><span class="p">[</span><span class="n">mid</span><span class="p">][</span><span class="n">mid</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><hr>
<p>从这个可以学到的：</p>
<ul>
<li>对角线遍历来等价一圈一圈。</li>
<li>起点和终点都有收缩，对应到代码就是startx,starty, offset。</li>
<li>利用左闭右开，上下和左右等价对待。</li>
</ul>
<p>顶级c++</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">generateMatrix</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="c1">// top
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>    <span class="c1">// bottom
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="c1">// left
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>    <span class="c1">// right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">k</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">l</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">r</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">,</span><span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="n">ans</span><span class="p">[</span><span class="n">t</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">++</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">t</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">b</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">,</span><span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">--</span><span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">r</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="n">l</span><span class="p">;</span><span class="o">--</span><span class="n">i</span><span class="p">,</span><span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="n">ans</span><span class="p">[</span><span class="n">b</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">--</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">b</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="n">t</span><span class="p">;</span><span class="o">--</span><span class="n">i</span><span class="p">,</span><span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">++</span><span class="n">l</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h3 id="链表">链表</h3>
<p>套路：</p>
<p>构造单链表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//cpp
</span></span></span><span class="line"><span class="cl"><span class="c1">// 单链表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">ListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>  <span class="c1">// 节点上存储的元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>  <span class="c1">// 指向下一个节点的指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="o">:</span> <span class="n">val</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">next</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span> <span class="p">{}</span>  <span class="c1">// 节点的构造函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//golang
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">ListNode</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Val</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Next</span> <span class="o">*</span><span class="nx">ListNode</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>删除的话一般需要知道这个节点的前一个节点添加节点的话几乎也是</p>
<p>所以遇到添加或者删除一般要提前一个删除，但是这样的话head没有判断，所以最后判断一次就ok</p>
<p>然而后面又学到一个骚方法</p>
<p>设置一个虚假的头节点，那么真head就是中间节点了(亏贼)</p>
<p><strong>一般要先判断链表是否没有元素，没有元素不能next，而就算有一个也能next</strong></p>
<p>leetcode 707.</p>
<blockquote>
<p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p>
</blockquote>
<blockquote>
<p>在链表类中实现这些功能：</p>
</blockquote>
<blockquote>
<ul>
<li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li>
<li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li>
<li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li>
<li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li>
<li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li>
</ul>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyLinkedList</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Length</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Head</span>   <span class="o">*</span><span class="nx">Node</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Tail</span>   <span class="o">*</span><span class="nx">Node</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Node</span> <span class="kd">struct</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Val</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Next</span> <span class="o">*</span><span class="nx">Node</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Prev</span> <span class="o">*</span><span class="nx">Node</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Constructor</span><span class="p">()</span> <span class="nx">MyLinkedList</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">list</span> <span class="o">:=</span> <span class="nx">MyLinkedList</span><span class="p">{</span><span class="nx">Length</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">Head</span><span class="p">:</span><span class="kc">nil</span><span class="p">,</span><span class="nx">Tail</span><span class="p">:</span><span class="kc">nil</span><span class="p">,}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">list</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">this</span> <span class="o">*</span><span class="nx">MyLinkedList</span><span class="p">)</span> <span class="nf">GetOne</span><span class="p">(</span><span class="nx">index</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">Node</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">cursor</span> <span class="o">*</span><span class="nx">Node</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">index</span><span class="o">&gt;=</span><span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">/</span><span class="mi">2</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">gap</span><span class="o">:=</span> <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">index</span>
</span></span><span class="line"><span class="cl">            <span class="nx">cursor</span><span class="p">=</span><span class="nx">this</span><span class="p">.</span><span class="nx">Tail</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="p">&lt;</span><span class="nx">gap</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">cursor</span><span class="p">=</span><span class="nx">cursor</span><span class="p">.</span><span class="nx">Prev</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">gap</span><span class="o">:=</span> <span class="nx">index</span><span class="o">-</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">            <span class="nx">cursor</span><span class="p">=</span><span class="nx">this</span><span class="p">.</span><span class="nx">Head</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="p">&lt;</span><span class="nx">gap</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">cursor</span><span class="p">=</span><span class="nx">cursor</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">cursor</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">this</span> <span class="o">*</span><span class="nx">MyLinkedList</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">index</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">index</span><span class="o">&gt;=</span><span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">cursor</span> <span class="o">:=</span> <span class="nx">this</span><span class="p">.</span><span class="nf">GetOne</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">cursor</span><span class="p">.</span><span class="nx">Val</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">this</span> <span class="o">*</span><span class="nx">MyLinkedList</span><span class="p">)</span> <span class="nf">AddAtHead</span><span class="p">(</span><span class="nx">val</span> <span class="kt">int</span><span class="p">)</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">nodeP</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Node</span><span class="p">{</span><span class="nx">Val</span><span class="p">:</span><span class="nx">val</span><span class="p">,</span><span class="nx">Next</span><span class="p">:</span><span class="kc">nil</span><span class="p">,</span><span class="nx">Prev</span><span class="p">:</span><span class="kc">nil</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">this</span><span class="p">.</span><span class="nx">Head</span><span class="p">=</span><span class="nx">nodeP</span>
</span></span><span class="line"><span class="cl">        <span class="nx">this</span><span class="p">.</span><span class="nx">Tail</span><span class="p">=</span><span class="nx">nodeP</span>
</span></span><span class="line"><span class="cl">        <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">node</span> <span class="o">:=</span> <span class="nx">Node</span><span class="p">{</span><span class="nx">Val</span><span class="p">:</span><span class="nx">val</span><span class="p">,</span><span class="nx">Next</span><span class="p">:</span><span class="nx">this</span><span class="p">.</span><span class="nx">Head</span><span class="p">,</span><span class="nx">Prev</span><span class="p">:</span><span class="kc">nil</span><span class="p">,}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nx">this</span><span class="p">.</span><span class="nx">Head</span><span class="p">.</span><span class="nx">Prev</span><span class="p">=</span><span class="o">&amp;</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl">    <span class="nx">this</span><span class="p">.</span><span class="nx">Head</span><span class="p">=</span><span class="o">&amp;</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl">    <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">++</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">this</span> <span class="o">*</span><span class="nx">MyLinkedList</span><span class="p">)</span> <span class="nf">AddAtTail</span><span class="p">(</span><span class="nx">val</span> <span class="kt">int</span><span class="p">)</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">nodeP</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Node</span><span class="p">{</span><span class="nx">Val</span><span class="p">:</span><span class="nx">val</span><span class="p">,</span><span class="nx">Next</span><span class="p">:</span><span class="kc">nil</span><span class="p">,</span><span class="nx">Prev</span><span class="p">:</span><span class="kc">nil</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">this</span><span class="p">.</span><span class="nx">Head</span><span class="p">=</span><span class="nx">nodeP</span>
</span></span><span class="line"><span class="cl">        <span class="nx">this</span><span class="p">.</span><span class="nx">Tail</span><span class="p">=</span><span class="nx">nodeP</span>
</span></span><span class="line"><span class="cl">        <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">node</span> <span class="o">:=</span> <span class="nx">Node</span><span class="p">{</span><span class="nx">Val</span><span class="p">:</span><span class="nx">val</span><span class="p">,</span><span class="nx">Next</span><span class="p">:</span><span class="kc">nil</span><span class="p">,</span><span class="nx">Prev</span><span class="p">:</span><span class="nx">this</span><span class="p">.</span><span class="nx">Tail</span><span class="p">,}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">this</span><span class="p">.</span><span class="nx">Tail</span><span class="p">.</span><span class="nx">Next</span><span class="p">=</span> <span class="o">&amp;</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl">    <span class="nx">this</span><span class="p">.</span><span class="nx">Tail</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl">    <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">++</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">this</span> <span class="o">*</span><span class="nx">MyLinkedList</span><span class="p">)</span> <span class="nf">AddAtIndex</span><span class="p">(</span><span class="nx">index</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">val</span> <span class="kt">int</span><span class="p">)</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">index</span><span class="p">&gt;</span><span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">index</span><span class="o">==</span><span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">this</span><span class="p">.</span><span class="nf">AddAtTail</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">index</span><span class="p">&gt;</span><span class="mi">0</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">nodeP</span> <span class="o">:=</span> <span class="nx">this</span><span class="p">.</span><span class="nf">GetOne</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nx">prevP</span> <span class="o">:=</span> <span class="nx">nodeP</span><span class="p">.</span><span class="nx">Prev</span>
</span></span><span class="line"><span class="cl">                <span class="nx">newNode</span> <span class="o">:=</span> <span class="nx">Node</span><span class="p">{</span><span class="nx">Val</span><span class="p">:</span><span class="nx">val</span><span class="p">,</span><span class="nx">Next</span><span class="p">:</span><span class="nx">nodeP</span><span class="p">,</span><span class="nx">Prev</span><span class="p">:</span><span class="nx">nodeP</span><span class="p">.</span><span class="nx">Prev</span><span class="p">,}</span>
</span></span><span class="line"><span class="cl">                <span class="nx">nodeP</span><span class="p">.</span><span class="nx">Prev</span><span class="p">=</span><span class="o">&amp;</span><span class="nx">newNode</span>
</span></span><span class="line"><span class="cl">                <span class="nx">prevP</span><span class="p">.</span><span class="nx">Next</span><span class="p">=</span><span class="o">&amp;</span><span class="nx">newNode</span>
</span></span><span class="line"><span class="cl">                <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">this</span><span class="p">.</span><span class="nf">AddAtHead</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">this</span> <span class="o">*</span><span class="nx">MyLinkedList</span><span class="p">)</span> <span class="nf">DeleteAtIndex</span><span class="p">(</span><span class="nx">index</span> <span class="kt">int</span><span class="p">)</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">index</span><span class="p">&lt;</span><span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">&amp;&amp;</span> <span class="nx">index</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">index</span><span class="o">==</span><span class="mi">0</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">this</span><span class="p">.</span><span class="nx">Head</span><span class="p">=</span><span class="nx">this</span><span class="p">.</span><span class="nx">Head</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">            <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">!=</span><span class="mi">0</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">this</span><span class="p">.</span><span class="nx">Head</span><span class="p">.</span><span class="nx">Prev</span><span class="p">=</span><span class="kc">nil</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">index</span><span class="o">==</span><span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">-</span><span class="mi">1</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">this</span><span class="p">.</span><span class="nx">Tail</span><span class="p">=</span><span class="nx">this</span><span class="p">.</span><span class="nx">Tail</span><span class="p">.</span><span class="nx">Prev</span>
</span></span><span class="line"><span class="cl">                <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">!=</span><span class="mi">0</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">this</span><span class="p">.</span><span class="nx">Tail</span><span class="p">.</span><span class="nx">Next</span><span class="p">=</span><span class="kc">nil</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">nodeP</span> <span class="o">:=</span> <span class="nx">this</span><span class="p">.</span><span class="nf">GetOne</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nx">prevP</span><span class="o">:=</span><span class="nx">nodeP</span><span class="p">.</span><span class="nx">Prev</span>
</span></span><span class="line"><span class="cl">                <span class="nx">nextP</span><span class="o">:=</span><span class="nx">nodeP</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">                <span class="nx">prevP</span><span class="p">.</span><span class="nx">Next</span><span class="p">=</span><span class="nx">nextP</span>
</span></span><span class="line"><span class="cl">                <span class="nx">nextP</span><span class="p">.</span><span class="nx">Prev</span><span class="p">=</span><span class="nx">prevP</span>
</span></span><span class="line"><span class="cl">                <span class="nx">this</span><span class="p">.</span><span class="nx">Length</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Your MyLinkedList object will be instantiated and called as such:
</span></span></span><span class="line"><span class="cl"><span class="cm"> * obj := Constructor();
</span></span></span><span class="line"><span class="cl"><span class="cm"> * param_1 := obj.Get(index);
</span></span></span><span class="line"><span class="cl"><span class="cm"> * obj.AddAtHead(val);
</span></span></span><span class="line"><span class="cl"><span class="cm"> * obj.AddAtTail(val);
</span></span></span><span class="line"><span class="cl"><span class="cm"> * obj.AddAtIndex(index,val);
</span></span></span><span class="line"><span class="cl"><span class="cm"> * obj.DeleteAtIndex(index);
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span></code></pre></div><p>官方实现:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyLinkedList</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">head</span> <span class="o">*</span><span class="nx">ListNode</span>
</span></span><span class="line"><span class="cl">    <span class="nx">size</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Constructor</span><span class="p">()</span> <span class="nx">MyLinkedList</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">MyLinkedList</span><span class="p">{</span><span class="o">&amp;</span><span class="nx">ListNode</span><span class="p">{},</span> <span class="mi">0</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">MyLinkedList</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">index</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">index</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">index</span> <span class="o">&gt;=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">size</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">cur</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">head</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">index</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">cur</span> <span class="p">=</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">Val</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">MyLinkedList</span><span class="p">)</span> <span class="nf">AddAtHead</span><span class="p">(</span><span class="nx">val</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">l</span><span class="p">.</span><span class="nf">AddAtIndex</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">MyLinkedList</span><span class="p">)</span> <span class="nf">AddAtTail</span><span class="p">(</span><span class="nx">val</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">l</span><span class="p">.</span><span class="nf">AddAtIndex</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">MyLinkedList</span><span class="p">)</span> <span class="nf">AddAtIndex</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">val</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">index</span> <span class="p">&gt;</span> <span class="nx">l</span><span class="p">.</span><span class="nx">size</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">index</span> <span class="p">=</span> <span class="nf">max</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">l</span><span class="p">.</span><span class="nx">size</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pred</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">head</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">index</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">pred</span> <span class="p">=</span> <span class="nx">pred</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">toAdd</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">ListNode</span><span class="p">{</span><span class="nx">val</span><span class="p">,</span> <span class="nx">pred</span><span class="p">.</span><span class="nx">Next</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pred</span><span class="p">.</span><span class="nx">Next</span> <span class="p">=</span> <span class="nx">toAdd</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">MyLinkedList</span><span class="p">)</span> <span class="nf">DeleteAtIndex</span><span class="p">(</span><span class="nx">index</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">index</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">index</span> <span class="o">&gt;=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">size</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">l</span><span class="p">.</span><span class="nx">size</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pred</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">head</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">index</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">pred</span> <span class="p">=</span> <span class="nx">pred</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pred</span><span class="p">.</span><span class="nx">Next</span> <span class="p">=</span> <span class="nx">pred</span><span class="p">.</span><span class="nx">Next</span><span class="p">.</span><span class="nx">Next</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">b</span> <span class="p">&gt;</span> <span class="nx">a</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">a</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>总结起来(虽然一个是单链表一个是双链表):</p>
<ol>
<li>
<p>构造函数给后面的处理带来了麻烦,没有真正用到虚拟头节点(虚拟尾节点)</p>
</li>
<li>
<p>虚拟头节点不是你在add的时候创建一个，而是这个链表一直就有的。在这里就是</p>
<p>head-&gt;index[0]-&gt;&hellip;-&gt;inde [length-1]-&gt;tail</p>
</li>
<li>
<p>而且这样遍历的时候可以左闭右开，也就是遍历的时候可以从第一个开始遍历。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>二分查找，双指针，滑动窗口</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/02/05/leetcode_day1/</link>
      <pubDate>Sun, 05 Feb 2023 16:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/02/05/leetcode_day1/</guid>
      <description>23-02-05 刷题记录 基本是跟着代码随想录刷的，day1刷了二分查找，滑窗还有双指针。记录一下当时的思路。 二分查找 二分查找突出的是一个熟练，针对已有的两</description>
      <content:encoded><![CDATA[<h2 id="23-02-05-刷题记录">23-02-05 刷题记录</h2>
<p>基本是跟着<a href="https://programmercarl.com/">代码随想录</a>刷的，day1刷了二分查找，滑窗还有双指针。记录一下当时的思路。</p>
<h3 id="二分查找">二分查找</h3>
<p>二分查找突出的是一个<strong>熟练</strong>，针对已有的两种写法: 开区间与闭区间我选择的是闭区间的写法。抄录我的写法如下:</p>
<blockquote>
<p>第一种写法，我们定义 target 是在一个在左闭右闭的区间里，也就是[left, right] （这个很重要非常重要）。</p>
</blockquote>
<blockquote>
<p>区间的定义这就决定了二分法的代码应该如何写，因为定义target在[left, right]区间，所以有如下两点：</p>
</blockquote>
<blockquote>
<ul>
<li>while (left &lt;= right) 要使用 &lt;= ，因为left == right是有意义的，所以使用 &lt;=</li>
<li>if (nums[middle] &gt; target) right 要赋值为 middle - 1，因为当前这个nums[middle]一定不是target，那么接下来要查找的左区间结束下标位置就是 middle - 1</li>
</ul>
</blockquote>
<p>例题都比较简单，不做展示。值得注意的是，边界条件为left==right，遇到变体的时候直接考虑这个以及之后的情况作为边界条件。</p>
<h3 id="双指针">双指针</h3>
<p>双指针法（快慢指针法）： 通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</p>
<ul>
<li>快指针: 遍历原始数组，根据条件寻找新数组的元素。</li>
<li>慢指针: 按序更新新数组</li>
</ul>
<h4 id="例题">例题</h4>
<blockquote>
<p>leetcode 27.
给你一个数组 nums 和一个值 val，你需要<em>原地</em> 移除所有数值等于 val 的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">removeElement</span><span class="p">(</span><span class="nx">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">val</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">j</span> <span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="p">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">);</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">==</span><span class="nx">val</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]=</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="nx">j</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nums</span><span class="p">=</span><span class="nx">nums</span><span class="p">[:</span><span class="nx">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">j</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>类似题目：</p>
<ul>
<li>26.删除排序数组中的重复项</li>
<li>283.移动零</li>
<li>844.比较含退格的字符串</li>
<li>977.有序数组的平方</li>
</ul>
<h3 id="滑动窗口">滑动窗口</h3>
<p>这类问题基本都和连续最短/最长子串相关，这种问题可以看成以数组中的任一个结尾满足条件的最短/最长。滑动窗口的思想就是利用连续的思想，窗口右侧在向右移动的过程中，左侧也不断移动，这样一般是O(2n)既O(n)而不是 ${O(n^2)}$。 而且一般会要在移动过程中记录下一min/max。</p>
<p>在使用滑窗时要注意:</p>
<ul>
<li>窗口内是什么？</li>
<li>如何移动窗口的起始位置？</li>
<li>如何移动窗口的结束位置？</li>
</ul>
<p>以leetcode 209. 为例:</p>
<blockquote>
<p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p>
</blockquote>
<blockquote>
<p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, &hellip;, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">minSubArrayLen</span><span class="p">(</span><span class="nx">target</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">j</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sum</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">min</span><span class="o">:=</span><span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">flag</span><span class="o">:=</span><span class="kc">false</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">;</span><span class="nx">j</span><span class="p">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">);</span><span class="nx">j</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">sum</span><span class="o">+=</span><span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">sum</span><span class="o">&gt;=</span><span class="nx">target</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="p">(</span><span class="nx">sum</span><span class="o">-</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span><span class="o">&gt;=</span> <span class="nx">target</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">sum</span><span class="o">-=</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="nx">i</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">&lt;</span><span class="nx">min</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">min</span> <span class="p">=</span> <span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">flag</span><span class="p">=</span><span class="kc">true</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">flag</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">min</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li>窗口内是以窗口最右为最末时当前的最短的和超过target的子串(如果能超过)</li>
<li>移动起始位置一般是比较难的，需要根据条件移动(比如这个里的如果少了这个还能大于target那就是可以移动)</li>
<li>末尾移动还是比较简单，暂时没有遇到什么困难的。</li>
</ul>
<p>leetcode 76.最小覆盖子串:</p>
<blockquote>
<p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 &quot;&quot; 。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">minWindow</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">t</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">j</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">out</span><span class="o">:=</span><span class="nx">s</span>
</span></span><span class="line"><span class="cl">    <span class="nx">target</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dict</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">byte</span><span class="p">]</span> <span class="kt">int</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">targetDict</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">byte</span><span class="p">]</span> <span class="kt">int</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">ch</span><span class="o">:=</span> <span class="k">range</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">t</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">_</span><span class="p">,</span><span class="nx">ok</span><span class="o">:=</span><span class="nx">targetDict</span><span class="p">[</span><span class="nx">ch</span><span class="p">];</span><span class="nx">ok</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">targetDict</span><span class="p">[</span><span class="nx">ch</span><span class="p">]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">targetDict</span><span class="p">[</span><span class="nx">ch</span><span class="p">]=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">;</span><span class="nx">j</span><span class="p">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span><span class="nx">j</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">_</span><span class="p">,</span><span class="nx">ok</span><span class="o">:=</span><span class="nx">dict</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">j</span><span class="p">]];</span><span class="nx">ok</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">dict</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">dict</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">j</span><span class="p">]]=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">t</span><span class="p">,</span><span class="nx">ok</span><span class="o">:=</span><span class="nx">targetDict</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">j</span><span class="p">]];</span><span class="nx">ok</span><span class="o">&amp;&amp;</span><span class="nx">dict</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span><span class="o">==</span><span class="nx">t</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">target</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">target</span><span class="o">==</span><span class="nb">len</span><span class="p">(</span><span class="nx">targetDict</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="nx">i</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nx">t</span><span class="p">,</span><span class="nx">ok</span><span class="o">:=</span><span class="nx">targetDict</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]];!</span><span class="nx">ok</span><span class="o">||</span><span class="nx">dict</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span><span class="o">-</span><span class="nx">t</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">dict</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">i</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">break</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="nx">out</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="nx">out</span><span class="p">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">:</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">target</span><span class="o">!=</span><span class="nb">len</span><span class="p">(</span><span class="nx">targetDict</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">out</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>注意：在每次判断左边界是否右移的时候，本来是需要比较旧dict和targetDict是否相等(每个元素都比较),但是其实只需要把满足条件的次数记录下来就可，就是需要出现的字符刚好相等的时候(target++)，这样到target等于len(targetdict)就必定可以满足条件。而且滑窗一般都会有设置flag这种操作。</p>
<p>相关例题：</p>
<ul>
<li>904.水果成篮</li>
<li>76.最小覆盖子串</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>標頭圖片</title>
      <link>https://blog.yehaohui.com/zh-cn/2018/03/05/%E6%A8%99%E9%A0%AD%E5%9C%96%E7%89%87/</link>
      <pubDate>Mon, 05 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2018/03/05/%E6%A8%99%E9%A0%AD%E5%9C%96%E7%89%87/</guid>
      <description>這是一個簡單的筆記。</description>
      <content:encoded><![CDATA[<p>這是一個簡單的筆記。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>筆記 2</title>
      <link>https://blog.yehaohui.com/zh-cn/2018/03/04/%E7%AD%86%E8%A8%98-2/</link>
      <pubDate>Sun, 04 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2018/03/04/%E7%AD%86%E8%A8%98-2/</guid>
      <description>這是一個簡單的筆記。</description>
      <content:encoded><![CDATA[<p>這是一個簡單的筆記。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>筆記 1</title>
      <link>https://blog.yehaohui.com/zh-cn/2018/03/03/%E7%AD%86%E8%A8%98-1/</link>
      <pubDate>Sat, 03 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2018/03/03/%E7%AD%86%E8%A8%98-1/</guid>
      <description>這是一個簡單的筆記。</description>
      <content:encoded><![CDATA[<p>這是一個簡單的筆記。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.yehaohui.com/zh-cn/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/links/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
  </channel>
</rss>
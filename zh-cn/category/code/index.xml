<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on Yehh</title>
    <link>https://blog.yehaohui.com/zh-cn/category/code/</link>
    <description>Recent content in code on Yehh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 16 Sep 2023 13:01:23 +0800</lastBuildDate><atom:link href="https://blog.yehaohui.com/zh-cn/category/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>yehh-wiki</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/16/category/yehh-wiki/</link>
      <pubDate>Sat, 16 Sep 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/16/category/yehh-wiki/</guid>
      <description>这里记录一些有用的连接 设计一个软件(服务)的原则/最佳实践-12factors golang 有用的库 viper 配置库 fsnotify 跨平台的文件提醒(一般是文件修改的提醒吧)</description>
    </item>
    
    <item>
      <title>DDIA-note</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/14/category/ddia-note/</link>
      <pubDate>Thu, 14 Sep 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/14/category/ddia-note/</guid>
      <description>Reference DDIA chinese</description>
    </item>
    
    <item>
      <title>interview-golang</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/13/category/interview-golang/</link>
      <pubDate>Wed, 13 Sep 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/13/category/interview-golang/</guid>
      <description>golang问题 init的执行顺序 Golang中变量的分配位置是堆or栈可以看看这个和刘丹冰的 GC[典藏版]Golang三色标记、混合写屏障</description>
    </item>
    
    <item>
      <title>高性能Mysql-ch1、2</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/09/12/category/high_perfermance_mysql_ch1_2/</link>
      <pubDate>Tue, 12 Sep 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/09/12/category/high_perfermance_mysql_ch1_2/</guid>
      <description>高性能Mysql 该系列主要是记录阅读高性能Mysql的一些笔记。 Mysql架构 架构的逻辑视图 连接管理和安全 每个客户端连接都会有一个线程，连接</description>
    </item>
    
    <item>
      <title>istio-day1</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/27/category/istio-day1/</link>
      <pubDate>Sun, 27 Aug 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/27/category/istio-day1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>leetcode_record2</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/25/category/leetcode_record2/</link>
      <pubDate>Fri, 25 Aug 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/25/category/leetcode_record2/</guid>
      <description>力扣记录2 剑指 Offer 51. 数组中的逆序对 我对这题的评价是逆天 class Solution { public: int mergeSort(vector&amp;lt;int&amp;gt;&amp;amp; nums, vector&amp;lt;int&amp;gt;&amp;amp; tmp, int l, int r) { if (l &amp;gt;= r) { return 0; } int mid = (l + r) / 2; int inv_count = mergeSort(nums, tmp, l, mid) + mergeSort(nums, tmp, mid + 1, r);</description>
    </item>
    
    <item>
      <title>containerd-intro</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/23/category/containerd-intro/</link>
      <pubDate>Wed, 23 Aug 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/23/category/containerd-intro/</guid>
      <description>Reference 容器运行时 containerd 学习笔记</description>
    </item>
    
    <item>
      <title>《Go 语言高性能编程》阅读</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/19/category/go-%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB/</link>
      <pubDate>Sat, 19 Aug 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/19/category/go-%E8%AF%AD%E8%A8%80%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB/</guid>
      <description>这个系列是记录阅读《Go 语言高性能编程》这本书的一些笔记 第一章：Go 语言性能分析 在学生时期，测试很难被重视起来，但是写好测试是程序员的进阶之</description>
    </item>
    
    <item>
      <title>gee-intro</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/19/category/gee-intro/</link>
      <pubDate>Sat, 19 Aug 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/19/category/gee-intro/</guid>
      <description>gee 本项目模仿极客兔兔的7天项目进行学习 gee-web 简介 这是一个简单的web框架，实现了路由、中间件、静态文件服务、模板渲染等功能。主要是模仿gin框架</description>
    </item>
    
    <item>
      <title>gee-intro</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/19/category/gee-intro/</link>
      <pubDate>Sat, 19 Aug 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/19/category/gee-intro/</guid>
      <description>osproxy</description>
    </item>
    
    <item>
      <title>golang test</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/19/category/golang-test/</link>
      <pubDate>Sat, 19 Aug 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/19/category/golang-test/</guid>
      <description>标准库 testing 标准测试使用go test 来编译运行测试*_test.go文件，这些文件不是go build命令编译的对象。 *_test.go 中，有三种测试 功能测试 每一个测试</description>
    </item>
    
    <item>
      <title>go-package-overview</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/16/category/net/http/</link>
      <pubDate>Wed, 16 Aug 2023 09:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/16/category/net/http/</guid>
      <description>i/o io constants const ( SeekStart = 0 // seek relative to the origin of the file SeekCurrent = 1 // seek relative to the current offset SeekEnd = 2 // seek relative to the end ) 和c++的seekg一样，有三种相对寻找方式 variables 几种错误 //要注意E</description>
    </item>
    
    <item>
      <title>zero-copy</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/16/category/zero-copy/</link>
      <pubDate>Wed, 16 Aug 2023 09:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/16/category/zero-copy/</guid>
      <description>linux i/o &amp;amp;&amp;amp; zero-copy reference: Linux I/O 原理和 Zero-copy 技术全面揭秘 深入剖析Linux IO原理和几种零拷贝机制的实现</description>
    </item>
    
    <item>
      <title>golang-detail</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/13/category/golang-detail/</link>
      <pubDate>Sun, 13 Aug 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/13/category/golang-detail/</guid>
      <description>空结构体 type EST stuct{ } func main(){ var b EST var c struct{}; fmt.Printf(&amp;#34;b address %P size %d\n&amp;#34;,&amp;amp;b,unsafe.size(b)) fmt.Printf(&amp;#34;c address %P size %d\n&amp;#34;,&amp;amp;c,unsafe.size(c)) //两者地址相同，空间占用都是0 } 自定义的和struct{}是等价 用法set可以用值为空</description>
    </item>
    
    <item>
      <title>leetcode_record1</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/13/category/leetcode_record1/</link>
      <pubDate>Sun, 13 Aug 2023 08:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/13/category/leetcode_record1/</guid>
      <description>剑指offer 剑指 Offer 12. 矩阵中的路径 一眼看出是回溯，其实还是挺简单的，但是要主要一开始遍历来找到起点。 剪绳子II 不能用动态规划，只能贪心，但是</description>
    </item>
    
    <item>
      <title>rocksdb源码分析（1）</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/05/category/rocksdb1/</link>
      <pubDate>Sat, 05 Aug 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/05/category/rocksdb1/</guid>
      <description>rocksdb源码解读(一) 本系列开始对rocksdb源码进行解读，主要是为了更好的理解rocksdb的设计思想，以及对rocksdb的使用</description>
    </item>
    
    <item>
      <title>rocksdb源码分析（2）</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/05/category/rocksdb2/</link>
      <pubDate>Sat, 05 Aug 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/05/category/rocksdb2/</guid>
      <description>columnfamily memtable WAL 格式 创建: rocksdb::DB::Open(options, &amp;ldquo;./db/&amp;rdquo;, &amp;amp;db); db-&amp;gt;Flush(rocksdb::FlushOptions(), handles[1]); 在Write的时候检查WAl大小超过了max_total_wal_size的时候，会创建新的wal。 memtable 写入 slice.h Slice 主要</description>
    </item>
    
    <item>
      <title>rocksdb源码分析（3）</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/05/category/rocksdb3/</link>
      <pubDate>Sat, 05 Aug 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/05/category/rocksdb3/</guid>
      <description>column family 介绍 是用来做逻辑隔离的，不同的column family可以有不同的配置，比如不同的compaction策略，不同的压缩策略等等。而且不同</description>
    </item>
    
    <item>
      <title>golang-interview-gmp</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/08/01/category/golang-interview-gmp/</link>
      <pubDate>Tue, 01 Aug 2023 13:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/08/01/category/golang-interview-gmp/</guid>
      <description>golang 调度器的由来 如果把并发交给os来完成，首先是CPU的调度消耗，其次进程占用4GB(虚拟内存)，线程占用4MB这些都是比较高的内存占用。 协程</description>
    </item>
    
    <item>
      <title>context</title>
      <link>https://blog.yehaohui.com/zh-cn/2023/07/11/category/net/http/</link>
      <pubDate>Tue, 11 Jul 2023 09:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh-cn/2023/07/11/category/net/http/</guid>
      <description>Overview: Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes. Incoming requests to a server should create a Context, and outgoing calls to servers should accept a Context. The chain of function calls between them must propagate the Context, optionally replacing it with a derived Context created using WithCancel, WithDeadline, WithTimeout, or WithValue. When a Context is canceled,</description>
    </item>
    
  </channel>
</rss>

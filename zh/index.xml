<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yehh</title>
    <link>https://blog.yehaohui.com/zh/</link>
    <description>Recent content on Yehh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 05 Feb 2023 16:01:23 +0800</lastBuildDate>
    
    <atom:link href="https://blog.yehaohui.com/zh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://blog.yehaohui.com/zh/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh/about/</guid>
      <description>Hi! 我是叶浩辉 华南理工大学 软件学院二年级本科生, 兴趣集中在Computer Vision 和 Trustworthy Machine Learning。 希望不断学习，不断进步，通过深度阅读提升思</description>
      <content:encoded><![CDATA[<h2 id="hi-我是叶浩辉httpsblogyehaohuicom">Hi! 我是<a href="https://blog.yehaohui.com/">叶浩辉</a></h2>
<p><a href="https://www.scut.edu.cn/new/">华南理工大学</a> 软件学院二年级本科生, 兴趣集中在Computer Vision 和 Trustworthy Machine Learning。</p>
<p>希望不断学习，不断进步，通过深度阅读提升思考能力。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>二分查找，双指针，滑动窗口</title>
      <link>https://blog.yehaohui.com/zh/2023/02/05/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%8F%8C%E6%8C%87%E9%92%88%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</link>
      <pubDate>Sun, 05 Feb 2023 16:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh/2023/02/05/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%8F%8C%E6%8C%87%E9%92%88%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</guid>
      <description>23-02-05 刷题记录 基本是跟着代码随想录刷的，day1刷了二分查找，滑窗还有双指针。记录一下当时的思路。 二分查找 二分查找突出的是一个熟练，针对已有的两</description>
      <content:encoded><![CDATA[<h2 id="23-02-05-刷题记录">23-02-05 刷题记录</h2>
<p>基本是跟着<a href="https://programmercarl.com/">代码随想录</a>刷的，day1刷了二分查找，滑窗还有双指针。记录一下当时的思路。</p>
<h3 id="二分查找">二分查找</h3>
<p>二分查找突出的是一个<strong>熟练</strong>，针对已有的两种写法: 开区间与闭区间我选择的是闭区间的写法。抄录我的写法如下:</p>
<blockquote>
<p>第一种写法，我们定义 target 是在一个在左闭右闭的区间里，也就是[left, right] （这个很重要非常重要）。</p>
</blockquote>
<blockquote>
<p>区间的定义这就决定了二分法的代码应该如何写，因为定义target在[left, right]区间，所以有如下两点：</p>
</blockquote>
<blockquote>
<ul>
<li>while (left &lt;= right) 要使用 &lt;= ，因为left == right是有意义的，所以使用 &lt;=</li>
<li>if (nums[middle] &gt; target) right 要赋值为 middle - 1，因为当前这个nums[middle]一定不是target，那么接下来要查找的左区间结束下标位置就是 middle - 1</li>
</ul>
</blockquote>
<p>例题都比较简单，不做展示。值得注意的是，边界条件为left==right，遇到变体的时候直接考虑这个以及之后的情况作为边界条件。</p>
<h3 id="双指针">双指针</h3>
<p>双指针法（快慢指针法）： 通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</p>
<ul>
<li>快指针: 遍历原始数组，根据条件寻找新数组的元素。</li>
<li>慢指针: 按序更新新数组</li>
</ul>
<h4 id="例题">例题</h4>
<blockquote>
<p>leetcode 27.
给你一个数组 nums 和一个值 val，你需要<em>原地</em> 移除所有数值等于 val 的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">removeElement</span><span class="p">(</span><span class="nx">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">val</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">j</span> <span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="p">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">);</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">==</span><span class="nx">val</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]=</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="nx">j</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nums</span><span class="p">=</span><span class="nx">nums</span><span class="p">[:</span><span class="nx">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">j</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>类似题目：</p>
<ul>
<li>26.删除排序数组中的重复项</li>
<li>283.移动零</li>
<li>844.比较含退格的字符串</li>
<li>977.有序数组的平方</li>
</ul>
<h3 id="滑动窗口">滑动窗口</h3>
<p>这类问题基本都和连续最短/最长子串相关，这种问题可以看成以数组中的任一个结尾满足条件的最短/最长。滑动窗口的思想就是利用连续的思想，窗口右侧在向右移动的过程中，左侧也不断移动，这样一般是O(2n)既O(n)而不是 ${O(n^2)}$。 而且一般会要在移动过程中记录下一min/max。</p>
<p>在使用滑窗时要注意:</p>
<ul>
<li>窗口内是什么？</li>
<li>如何移动窗口的起始位置？</li>
<li>如何移动窗口的结束位置？</li>
</ul>
<p>以leetcode 209. 为例:</p>
<blockquote>
<p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p>
</blockquote>
<blockquote>
<p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, &hellip;, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">minSubArrayLen</span><span class="p">(</span><span class="nx">target</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">j</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sum</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="nx">min</span><span class="o">:=</span><span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">flag</span><span class="o">:=</span><span class="kc">false</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">;</span><span class="nx">j</span><span class="p">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">);</span><span class="nx">j</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">sum</span><span class="o">+=</span><span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">sum</span><span class="o">&gt;=</span><span class="nx">target</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="p">(</span><span class="nx">sum</span><span class="o">-</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span><span class="o">&gt;=</span> <span class="nx">target</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">sum</span><span class="o">-=</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="nx">i</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">&lt;</span><span class="nx">min</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">min</span> <span class="p">=</span> <span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">flag</span><span class="p">=</span><span class="kc">true</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">flag</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">min</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li>窗口内是以窗口最右为最末时当前的最短的和超过target的子串(如果能超过)</li>
<li>移动起始位置一般是比较难的，需要根据条件移动(比如这个里的如果少了这个还能大于target那就是可以移动)</li>
<li>末尾移动还是比较简单，暂时没有遇到什么困难的。</li>
</ul>
<p>相关例题：</p>
<ul>
<li>904.水果成篮</li>
<li>76.最小覆盖子串</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>標頭圖片</title>
      <link>https://blog.yehaohui.com/zh/2018/03/05/%E6%A8%99%E9%A0%AD%E5%9C%96%E7%89%87/</link>
      <pubDate>Mon, 05 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh/2018/03/05/%E6%A8%99%E9%A0%AD%E5%9C%96%E7%89%87/</guid>
      <description>這是一個簡單的筆記。</description>
      <content:encoded><![CDATA[<p>這是一個簡單的筆記。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>筆記 2</title>
      <link>https://blog.yehaohui.com/zh/2018/03/04/%E7%AD%86%E8%A8%98-2/</link>
      <pubDate>Sun, 04 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh/2018/03/04/%E7%AD%86%E8%A8%98-2/</guid>
      <description>這是一個簡單的筆記。</description>
      <content:encoded><![CDATA[<p>這是一個簡單的筆記。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>筆記 1</title>
      <link>https://blog.yehaohui.com/zh/2018/03/03/%E7%AD%86%E8%A8%98-1/</link>
      <pubDate>Sat, 03 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://blog.yehaohui.com/zh/2018/03/03/%E7%AD%86%E8%A8%98-1/</guid>
      <description>這是一個簡單的筆記。</description>
      <content:encoded><![CDATA[<p>這是一個簡單的筆記。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>